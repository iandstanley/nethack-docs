\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename nethack.info
@settitle A Guide to the Mazes of Menace
@documentencoding UTF-8
@documentlanguage en
@c %**end of header

@finalout
@titlepage
@title Nethack Guidebook (v3.6.6)
@subtitle Nethack Guidebook
@author Eric S@. Raymond
@author Mike Stephenson and others
@end titlepage

@contents

@ifnottex
@node Top
@top A Guide to the Mazes of Menace

@center A Guide to the Mazes of Menace
@center    (Guidebook for NetHack)


@center              Original version - Eric S@. Raymond
@center (Edited and expanded for 3.6 by Mike Stephenson and others)

@center January 27, 2020

NetHack is a single player dungeon exploration game that runs on a
wide variety of computer systems, with a variety of graphical and text
interfaces all using the same game engine. Unlike many other Dungeons
& Dragons-inspired games, the emphasis in NetHack is on discovering
the detail of the dungeon and not simply killing everything in sight -
in fact, killing everything in sight is a good way to die
quickly. Each game presents a different landscape - the random number
generator provides an essentially unlimited number of variations of
the dungeon and its denizens to be discovered by the player in one of
a number of characters: you can pick your race, your role, and your
gender. 
@end ifnottex

@menu
* Introduction::
* What is going on here?::
* What do all those things on the screen mean?::
* Commands::
* Rooms and corridors::
* Monsters::
* Objects::
* Conduct::
* Options::
* Scoring::
* Explore mode::
* Credits::
* Nethack man pages::
* Index::

@detailmenu
--- The Detailed Node Listing ---

What do all those things on the screen mean?

* The message line::
* The map::
* The status lines::

Commands

* Commands: Commands (1). 
* Extended commands::

Rooms and corridors

* Doorways::
* Traps (`^')::
* Stairs and ladders (`<', `>'): Stairs and ladders (`<' `>'). 
* Shops and shopping::

Shops and shopping

* Shop idiosyncrasies::


Monsters

* Fighting::
* Your pet::
* Steeds::
* Bones levels::
* Persistence of Monsters::

Objects

* Curses and Blessings::
* Weapons (`)')::
* Armor (`[')::
* Food (`%')::
* Scrolls (`?')::
* Potions (`!')::
* Wands (`/')::
* Rings (`=')::
* Spellbooks (`+')::
* Tools (`(')::
* Amulets (`"')::
* Gems (`*')::
* Large rocks (``')::
* Gold (`$')::
* Persistence of Objects::

Weapons (`)')

* Throwing and shooting::
* Weapon proficiency::
* Two-Weapon combat::


Tools (`(')

* Containers::


Options

* Setting the options::
* Using a configuration file::
* Using the NETHACKOPTIONS environment variable::
* 9.4. Customization options: 94 Customization options. 
* Window Port Customization options::
* Platform-specific Customization options::
* Regular Expressions::
* Configuring Autopickup Exceptions::
* Changing Key Bindings::
* Configuring Message Types::
* Configuring Menu Colors::
* Configuring User Sounds::
* Configuring Status Hilites::
* Modifying NetHack Symbols::
* Configuring NetHack for Play by the Blind::
* Global Configuration for System Administrators::

Modifying NetHack Symbols

* NetHack Symbols::


Explore mode

* Debug mode::

Credits

* SPECIAL THANKS::

Nethack man pages

* Nethack(1) man page::
* Nethack recovery tool::
* Nethack data librarian man page::
* Nethack dungeon compiler man page::
* Nethack special levels compiler man page::

@end detailmenu
@end menu

@node Introduction
@chapter Introduction

@pindex Introduction
@cindex Introduction

Recently, you have begun to find yourself unfulfilled and distant in
your daily occupation.  Strange dreams of stealing, crusading, and
combat have haunted you in your sleep for many months, but you aren't
sure of the reason.  You wonder whether you have in fact been haviqng
those dreams all your life, and somehow managed to forget about them
until now.  Some nights you awaken suddenly and cry out, terrified at
the vivid recollection of the strange and powerful creatures that seem
to be lurking behind every corner of the dungeon in your dream.  Could
these details haunting your dreams be real?  As each night passes, you
feel the desire to enter the mysterious caverns near the ruins grow
stronger.  Each morning, however, you quickly put the idea out of your
head as you recall the tales of those who entered the caverns before
you and did not return.  Eventually you can resist the yearning to
seek out the fantastic place in your dreams no longer.  After all,
when other adventurers came back this way after spending time in the
caverns, they usually seemed better off than when they passed through
the first time.  And who was to say that all of those who did not
return had not just kept going?

Asking around, you hear about a bauble, called the Amulet of Yendor by
some, which, if you can find it, will bring you great wealth.  One
legend you were told even mentioned that the one who finds the amulet
will be granted immortality by the gods.  The amulet is rumored to be
somewhere beyond the Valley of Gehennom, deep within the Mazes of
Menace.  Upon hearing the legends, you immediately realize that there
is some profound and undiscovered reason that you are to descend into
the caverns and seek out that amulet of which they spoke.  Even if the
rumors of the amulet's powers are untrue, you decide that you should
at least be able to sell the tales of your adventures to the local
minstrels for a tidy sum, especially if you encounter any of the
terrifying and magical creatures of your dreams along the way.  You
spend one last night fortifying yourself at the local inn, becoming
more and more depressed as you watch the odds of your success being
posted on the inn's walls getting lower and lower.

In the morning you awake, collect your belongings, and set off for the
dungeon.  After several days of uneventful travel, you see the ancient
ruins that mark the entrance to the Mazes of Menace.  It is late at
night, so you make camp at the entrance and spend the night sleeping
under the open skies.  In the morning, you gather your gear, eat what
may be your last meal outside, and enter the dungeon@dots{}

@node What is going on here?
@chapter What is going on here?

@pindex What is going on here?
@cindex What is going on here?

You have just begun a game of NetHack.  Your goal is to grab as much
treasure as you can, retrieve the Amulet of Yendor, and escape the
Mazes of Menace alive.

Your abilities and strengths for dealing with the hazards of adventure
will vary with your background and training:

@itemize
@item
Archeologists understand dungeons pretty well; this enables them to
move quickly and sneak up on the local nasties.  They start equipped
with the tools for a proper scientific expedition. 

@item
Barbarians are warriors out of the hinterland, hardened to
battle. They begin their quests with naught but uncommon strength, a
trusty hauberk, and a great two-handed sword. 

@item
Cavemen and Cavewomen start with exceptional strength but,
unfortunately, with neolithic weapons. 

@item
Healers are wise in medicine and apothecary.  They know the herbs
and simples that can restore vitality, ease pain, anesthetize, and
neutralize poisons; and with their instruments, they can divine a
being's state of health or sickness.  Their medical practice earns
them quite reasonable amounts of money, with which they enter the
dungeon. 

@item
Knights are distinguished from the common skirmisher by their
devotion to the ideals of chivalry and by the surpassing excellence
of their armor. 

@item
Monks are ascetics, who by rigorous practice of physical and mental
disciplines have become capable of fighting as effectively without
weapons as with.  They wear no armor but make up for it with
increased mobility. 

@item
Priests and Priestesses are clerics militant, crusaders advancing
the cause of righteousness with arms, armor, and arts thaumaturgic.
Their ability to commune with deities via prayer occasionally
extricates them from peril, but can also put them in it. 

@item
Rangers are most at home in the woods, and some say slightly out of
place in a dungeon.  They are, however, experts in archery as well
as tracking and stealthy movement. 

@item
Rogues are agile and stealthy thieves, with knowledge of locks,
traps, and poisons.  Their advantage lies in surprise, which they
employ to great advantage. 

@item
Samurai are the elite warriors of feudal Nippon.  They are lightly
armored and quick, and wear the dai-sho, two swords of the deadliest
keenness. 

@item
Tourists start out with lots of gold (suitable for shopping with), a
credit card, lots of food, some maps, and an expensive camera.  Most
monsters don't like being photographed. 

@item
Valkyries are hardy warrior women.  Their upbringing in the harsh
Northlands makes them strong, inures them to extremes of cold, and
instills in them stealth and cunning. 

@item
Wizards start out with a knowledge of magic, a selection of magical
items, and a particular affinity for dweomercraft.  Although
seemingly weak and easy to overcome at first sight, an experienced
Wizard is a deadly foe. 
@end itemize

You may also choose the race of your character (within limits; most
roles have restrictions on which races are eligible for them):

@itemize
@item
Dwarves are smaller than humans or elves, but are stocky and solid
individuals.  Dwarves' most notable trait is their great expertise
in mining and metalwork.  Dwarvish armor is said to be second in
quality not even to the mithril armor of the Elves. 

@item
Elves are agile, quick, and perceptive; very little of what goes on
will escape an Elf.  The quality of Elven craftsmanship often gives
them an advantage in arms and armor. 

@item
Gnomes are smaller than but generally similar to dwarves.  Gnomes
are known to be expert miners, and it is known that a secret
underground mine complex built by this race exists within the Mazes
of Menace, filled with both riches and danger. 

@item
Humans are by far the most common race of the surface world, and are
thus the norm to which other races are often compared.  Although
they have no special abilities, they can succeed in any role. 

@item
Orcs are a cruel and barbaric race that hate every living thing
(including other orcs).  Above all others, Orcs hate Elves with a
passion unequalled, and will go out of their way to kill one at any
opportunity.  The armor and weapons fashioned by the Orcs are
typically of inferior quality. 
@end itemize

@node What do all those things on the screen mean?
@chapter What do all those things on the screen mean?

@pindex What do all those things on the screen mean?
@cindex What do all those things on the screen mean?

On the screen is kept a map of where you have been and what you have
seen on the current dungeon level; as you explore more of the level,
it appears on the screen in front of you.

When NetHack's ancestor rogue first appeared, its screen orientation
was almost unique among computer fantasy games.  Since then, screen
orientation has become the norm rather than the exception; NetHack
continues this fine tradition.  Unlike text adventure games that
accept commands in pseudo-English sentences and explain the results in
words, NetHack commands are all one or two keystrokes and the results
are displayed graphically on the screen.  A minimum screen size of 24
lines by 80 columns is recommended; if the screen is larger, only a
21x80 section will be used for the map.

NetHack can even be played by blind players, with the assistance of
Braille readers or speech synthesisers.  Instructions for configuring
NetHack for the blind are included later in this document.

NetHack generates a new dungeon every time you play it; even the
authors still find it an entertaining and exciting game despite having
won several times.

NetHack offers a variety of display options.  The options available to
you will vary from port to port, depending on the capabilities of your
hardware and software, and whether various compile-time options were
enabled when your executable was created.  The three possible display
options are: a monochrome character interface, a color character
interface, and a graphical interface using small pictures called
tiles.  The two character interfaces allow fonts with other characters
to be substituted, but the default assignments use standard ASCII
characters to represent everything.  There is no difference between
the various display options with respect to game play.  Because we
cannot reproduce the tiles or colors in the Guidebook, and because it
is common to all ports, we will use the default ASCII characters from
the monochrome character display when referring to things you might
see on the screen during your game.

In order to understand what is going on in NetHack, first you must
understand what NetHack is doing with the screen.  The NetHack screen
replaces the "You see @dots{}" descriptions of text adventure
games. Figure 1 is a sample of what a NetHack screen might look like.
The way the screen looks for you depends on your platform.  

@example
+----------------------------------------------------------------+
|The bat bites!                                                  |
|                                                                |
|    ------                                                      |
|    |....|    ----------                                        |
|    |.<..|####...@@...$.|                                        |
|    |....-#   |...B....+                                        |
|    |....|    |.d......|                                        |
|    ------    -------|--                                        |
|                                                                |
|                                                                |
|                                                                |
|Player the Rambler    St:12 Dx:7 Co:18 In:11 Wi:9 Ch:15 Neutral |
|Dlvl:1 $:0 HP:9(12) Pw:3(3) AC:10 Exp:1/19 T:257 Weak           |
+---------------------------Figure-1-----------------------------+
@end example

@menu
* The message line::
* The map::
* The status lines::
@end menu

@node The message line
@section The message line

@pindex The message line
@cindex The message line

The top line of the screen is reserved for messages that describe
things that are impossible to represent visually.  If  you see a
"--More--" on the top line, this means that NetHack has another
message to display on the screen, but it wants to make certain that
you've read the one that is there first.  To read the next message,
just press the space bar.  

To change how and what messages are  shown  on  the  message line, see
"Configuring Message Types" and the verbose option.

@node The map
@section The map

@pindex The map
@cindex The map

The rest  of the screen is the map of the level as you have explored
it so far.  Each symbol on the screen  represents  something.   You
can  set various graphics options to change some of the symbols the
game uses; otherwise, the game will  use  default symbols.  Here is a
list of what the default symbols mean: 


@table @asis
@item - and |
The walls of a room, or an open door.  Or a grave (|).

@item .
The floor of a room, ice, or a doorless doorway.

@item #
A  corridor,  or iron bars, or a tree, or possibly a kitchen
sink (if your dungeon has sinks), or a drawbridge. 

@item >
Stairs down: a way to the next level.

@item <
Stairs up: a way to the previous level.

@item +
A closed door, or a spellbook containing a spell you may be
able to learn. 

@item @@
Your character or a human.

@item $
A pile of gold.

@item ^
A trap (once you have detected it).

@item )
A weapon.

@item [
A suit or piece of armor.

@item %
Something edible (not necessarily healthy).

@item ?
A scroll.

@item /
A wand.

@item =
A ring.

@item !
A potion.

@item (
A useful item (pick-axe, key, lamp@dots{}).

@item "
An amulet or a spider web.

@item *
A gem or rock (possibly valuable, possibly worthless).

@item `
A boulder or statue.

@item 0
An iron ball.

@item _
An altar, or an iron chain.

@item @{
A fountain.

@item @}
A pool of water or moat or a pool of lava.

@item \
An opulent throne.

@item a-zA-Z and other symbols
Letters  and certain other symbols
represent the various inhabitants of the Mazes of Menace.  Watch
out,  they  can be nasty and vicious.  Sometimes, however, they can
be helpful.  

@item I
This marks the last known location of an invisible or otherwise
unseen monster.   Note  that  the  monster  could  have moved.  The
`F' and `m' commands may be useful here. 
@end table


You  need  not  memorize  all these symbols; you can ask the game what
any symbol represents with the  `/'  command  (see  the next section
for more info).

@node The status lines
@section The status lines

@pindex The status lines
@cindex The status lines

The bottom two lines of the screen contain several cryptic pieces of
information describing your current status.  If either status line
becomes longer than the width of the screen, you might not see all of
it.  Here are explanations of what the various status items mean
(though your configuration may not have all the status items listed
below):

@table @asis
@item Rank
Your character's name and professional ranking (based on
the experience level, see below)  

@item Strength
A measure of your character's strength; one of your six
basic  attributes.   A  human character's attributes can range from
3 to 18 inclusive; non-humans may exceed  these  limits
(occasionally you may get super-strengths of the form 18/xx, and
magic can also cause attributes  to  exceed  the  normal limits).
The  higher  your strength, the stronger you are. Strength  affects
how  successfully  you  perform  physical tasks,  how  much damage
you do in combat, and how much loot you can carry. 

@item Dexterity
Dexterity affects your chances to hit in  combat,  to
avoid traps,  and do other tasks requiring agility or manipulation
of objects. 

@item Constitution
Constitution affects your ability to recover  from
injuries and  other strains on your stamina.  When strength is low
or modest, constitution also affects how much  you  can  carry. With
sufficiently high strength, the contribution to carrying capacity
from your constitution no longer matters. 

@item Intelligence
Intelligence affects your ability to cast  spells
and  read spellbooks.

@item Wisdom
Wisdom comes from your practical experience (especially
when dealing with magic).  It affects your magical energy. 

@item Charisma
Charisma affects how certain creatures react toward you.
In particular, it can affect the prices shopkeepers offer you. 

@item Alignment
Lawful, Neutral, or Chaotic.  Often, Lawful is taken as
good and Chaotic as evil, but legal and ethical do not always
coincide.  Your alignment influences how other monsters react toward
you.  Monsters of a like alignment are more likely to be
non-aggressive, while those of an opposing alignment are more likely
to be seriously offended at your presence.

@item Dungeon Level
How deep you are in the dungeon.  You start at
level one and the number increases as you go deeper into the
dungeon. Some levels are special, and are identified by a name and
not a number.  The Amulet of Yendor is reputed to be somewhere
beneath the twentieth level.

@item Gold
The number of gold pieces you  are  openly  carrying. Gold
which you have concealed in containers is not counted. 

@item Hit Points
Your  current  and  maximum hit points.  Hit points
indicate how much damage you can take before you die.  The  more
you get  hit in a fight, the lower they get.  You can regain hit
points by resting, or by  using  certain  magical  items  or spells.
The  number  in  parentheses is the maximum number your hit points
can reach. 

@item Power
Spell points.  This tells you how much mystic energy
(mana) you  have  available for spell casting.  Again, resting will
regenerate the amount available. 

@item Armor Class
A measure of how effectively your armor stops blows
from unfriendly  creatures.  The lower this number is, the more
effective the armor; it is quite possible to have negative armor
class. 

@item Experience
Your current experience level and experience points.
As you adventure, you gain experience points.  At  certain
experience  point  totals, you gain an experience level.  The more
experienced you are, the better you fight and withstand magical
attacks.  Many dungeons show only your experience level here.  

@item Time
The number of turns elapsed so far, displayed  if  you  have
the time option set. 

@item Status 
@itemize
@item
Hunger:  your  current  hunger status.  Values are Satiated, Not
Hungry (or Normal), Hungry,  Weak,  and  Fainting.   Not shown when
Normal. 
@item
Encumbrance:  an indication of how what you are carrying affects
your ability to move.  Values are Unencumbered, Encumbered,
Stressed,  Strained, Overtaxed, and Overloaded.  Not shown when
Unencumbered. 
@item
Fatal conditions: Stone (aka Petrifying, turning to  stone), Slime
(turning into green slime), Strngl (being strangled), FoodPois
(suffering  from  acute  food  poisoning),  TermIll (suffering from
a terminal illness). 
@item
Non-fatal  conditions: Blind (can't see), Deaf (can't hear), Stun
(stunned), Conf (confused), Hallu (hallucinating). 
@item
Movement modifiers: Lev  (levitating),  Fly  (flying),  Ride (riding).
@item
Other conditions and modifiers exist, but there isn't enough room
to display them with the other status fields.   
@item
The `@math{^X}' command shows all relevant status conditions.
@end itemize
@end table

@node Commands
@chapter Commands

@pindex Commands
@cindex Commands

Commands can be initiated by typing one or two characters to which the
command is bound to, or typing the command name in  the extended
commands  entry.   Some commands, like "search", do not require that
any more information be collected by NetHack.  Other commands  might
require additional information, for example a direction, or an
object to be used.  For those  commands  that  require  additional
information, NetHack will present you with either a menu of choices
or with a command line  prompt  requesting information.  Which you are
presented with will depend chiefly on how you have set the menustyle
option.  

For example, a common question, in the form "What do you want to use?
[a-zA-Z ?*]", asks you to choose an object you are carrying. Here,
"a-zA-Z" are the inventory letters of your possible choices. Typing
`?' gives you an inventory list of these items, so you can see what
each letter refers to.  In this example, there is also a `*'
indicating that you may choose an object not on the list, if you
wanted to use something unexpected.  Typing a `*' lists your entire
inventory, so you can see the inventory letters of every object you're
carrying.  Finally, if you change your mind and decide you don't want
to do this command after all, you can press the ESC key to abort the
command.

You can put a number before some  commands  to  repeat  them that
many  times;  for example, "10s" will search ten times.  If you have
the number@math{_pad} option set, you must type `n' to prefix a count,  so
the example above would be typed "n10s" instead.  Commands for which
counts make no sense ignore them.   In  addition, movement  commands
can  be prefixed for greater control (see below).  To cancel a count
or a prefix, press the ESC key. 

@menu
* Commands: Commands (1). 
* Extended commands::
@end menu

@node Commands (1)
@section Commands

The list of commands is rather long, but it can be  read  at any  time
during the game through the `?' command, which accesses a menu of
helpful texts.  Here are the default key  bindings  for your
reference: 

@table @asis
@item ?
Help menu:  display one of several help texts available.

@item /
The "whatis" command, to tell what a symbol represents.  You
may choose to specify a location or type a symbol (or even a whole
word)  to  explain.  Specifying a location is done by moving the
cursor to a particular spot on the map  and  then pressing one of
`.', `,', `;', or `:'.  `.' will explain the symbol at the chosen
location, conditionally check for "More info?"  depending  upon
whether  the help option is on, and then you will be asked to pick
another  location;  `,'  will explain the symbol but skip any
additional information, then let you pick another location; `;'
will skip additional info and also not bother asking you to choose
another location to examine; `:' will show additional info, if any,
without ask- ing for confirmation.  When picking a location,
pressing the ESC key will terminate this command, or  pressing  `?'
will give a brief reminder about how it works. 

If  the  autodescribe  option  is on, a short description of what
you see at each location is shown as you move the  cursor.   Typing
`#' while picking a location will toggle that option on or off.
The whatis@math{_coord} option controls  whether the short description
includes map coordinates. 

Specifying  a  name  rather than a location always gives any
additional information available about that name. 

You may also request a description of nearby  monsters,  all
monsters  currently  displayed,  nearby  objects, or all objects.
The whatis@math{_coord} option controls which format of map coordinate is
included with their descriptions. 
@end table
@table @asis
@item &
Tell what a command does.

@item <
Go  up  to  the previous level (if you are on a staircase or ladder).

@item >
Go down to the next level (if you are on a staircase or ladder).

@item [yuhjklbn]
Go  one  step in the direction indicated (see Figure
2).  If you sense or remember a monster there, you  will  fight  the
monster  instead.   Only  these  one-step  movement commands cause
you to fight monsters; the others (below) are "safe." 
@end table

@example
y  k  u          7  8  9
 \ | /            \ | /
h- . -l          4- . -6
 / | \            / | \
b  j  n          1  2  3

 (if number_pad is set)

        Figure 2
@end example

@table @asis
@item [YUHJKLBN]
Go in that direction until you hit a wall or run into
something. 

@item m[yuhjklbn]
Prefix:   move  without picking up objects or
fighting (even if you remember a monster there).  

A few non-movement commands use the `m'  prefix to request operating
via menu (to temporarily override the menustyle:Traditional option).
Primarily useful for `,' (pickup) when there is only one class of
objects present (where there won't be any "what kinds of objects?"
prompt, so no opportunity to answer `m' at that prompt). 

A few other commands (eat food, offer sacrifice, apply tinning-kit)
use the `m' prefix to skip checking for applicable objects on the
floor and go straight to checking inventory, or (for "#loot" to
remove a saddle), skip containers and go straight to adjacent
monsters. The prefix will make "#travel" command show a menu of
interesting targets in sight. In debug mode (aka "wizard mode"), the
`m' prefix may also be used with the "#teleport" and "#wizlevelport"
commands. 

@item F[yuhjklbn]
Prefix: fight a monster (even if you only guess one
is there). 

@item M[yuhjklbn]
Prefix: move far, no pickup.

@item g[yuhjklbn]
Prefix: move until something interesting is found.

@item G[yuhjklbn] or <CONTROL->[yuhjklbn]
Prefix:  same as `g', but
forking of corridors is not con- sidered interesting. 

@item _
Travel to a map location via a shortest-path algorithm.

The shortest path is computed over map locations the hero knows
about (e.g. seen or previously traversed). If there is no known
path, a guess is made instead. Stops on most of the same conditions
as the `G' command, but without picking up objects, similar to the
`M' command.  For ports with mouse support, the command is also
invoked when a mouse-click takes place on a location other than the
current position.  

@item .
Wait or rest, do nothing for one turn.

@item a
Apply (use) a tool (pick-axe, key, lamp@dots{}). If used on a wand,
that wand will be broken, releasing its magic in the
process. Confirmation is required. 

@item A
Remove one or more worn items, such as armor. Use `T' (take
off) to take off only one piece of armor or `R' (remove) to take off
only one accessory. 

@item ^A
Redo the previous command.

@item c
Close a door.

@item C
Call (name) a monster, an individual object, or a type of
object. Same as extended command "#name". 

@item ^C
Panic button. Quit the game.

@item d
Drop something. For example "d7a" means drop seven items of
object a. 

@item D
Drop several things. In answer to the question

"What kinds of things do you want to drop? [!%= BUCXaium]"

you should type zero or more object symbols possibly followed by `a'
and/or `i' and/or `u' and/or `m'. In addition, one or more of the
blessed/uncursed/cursed groups may be typed:  

@itemize
@item
DB - drop all objects known to be blessed.
@item
DU - drop all objects known to be uncursed.
@item
DC - drop all objects known to be cursed.
@item
DX - drop all objects of unknown B/U/C status.
@item
Da - drop all objects, without asking for confirmation.
@item
Di - examine your inventory before dropping anything.
@item
Du - drop only unpaid objects (when in a shop).
@item
Dm - use a menu to pick which object(s) to drop.
@item
D%u - drop only unpaid food.
@end itemize

The last example shows a combination. There are three categories of
object filtering: class (`!' for potions, `?' for scrolls, and so
on), shop status (`u' for unpaid, in other words, owned by the
shop), and bless/curse state (`B', `U', `C', and `X' as shown
above). If you specify more than one value in a category (such as
"!?" for potions and scrolls or "BU" for blessed and uncursed), an
inventory object will meet the criteria if it matches any of the
specified values (so "!?" means `!' or `?'). If you specify more
than one category, an inventory object must meet each of the
category criteria (so "%u" means class `%' and unpaid `u'). Lastly,
you may specify multiple values within multiple categories: "!?BU"
will select all potions and scrolls which are known to be blessed or
uncursed. (In versions prior to 3.6, filter combinations behaved
differently.) 

@item ^D
Kick something (usually a door).

@item e
Eat food. Normally checks for edible item(s) on the floor,
then if none are found or none are chosen, checks for edible
item(s) in inventory. Precede `e' with the `m' prefix to bypass
attempting to eat anything off the floor. If you attempt to eat
while already satiated, you might choke to death. If you risk it,
you will be asked whether to "continue eating?" if you survive the
first bite.  You can set the paranoid@math{_confirmation}:eating option to
require a response of yes instead of just y.

@item E
Engrave a message on the floor.

@item E-
Write in the dust with your fingers.

Engraving the word "Elbereth" will cause most monsters to not attack
you hand-to-hand (but if you attack, you will rub it out); this is
often useful to give yourself a breather. 

@item f
Fire (shoot or throw) one of the objects placed in your quiver
(or quiver sack, or that you have at the ready). You may select
ammunition with a previous `Q' command, or let the computer pick
something appropriate if autoquiver is true. 

See also `t' (throw) for more general throwing and shooting.

@item i
List your inventory (everything you're carrying).

@item I
List selected parts of your inventory, usually be specifying
the character for a particular set of objects, like `[' for armor or
`!' for potions. 

@itemize
@item
I* - list all gems in inventory;
@item
Iu - list all unpaid items;
@item
Ix - list all used up items that are on your shopping bill;
@item
IB - list all items known to be blessed;
@item
IU - list all items known to be uncursed;
@item
IC - list all items known to be cursed;
@item
IX - list all items whose bless/curse status is unknown;
@item
I$ - count your money.
@end itemize

@item o
Open a door.

@item O
Set options.

A menu showing the current option values will be displayed. You can
change most values simply by selecting the menu entry for the given
option (ie, by typing its letter or clicking upon it, depending on
your user interface). For the non-boolean choices, a further menu or
prompt will appear once you've closed this menu. The available
options are listed later in this Guidebook. Options are usually set
before the game rather than with the `O' command; see the section on
options below. 

@item ^O
Show overview.

Shortcut for "#overview": list interesting dungeon levels
visited. (Prior to 3.6.0, `@math{^O}' was a debug mode command which listed
the placement of all special levels. Use "#wizwhere" to run that
command.) 

@item p
Pay your shopping bill.

@item P
Put on an accessory (ring, amulet, or blindfold).

This command may also be used to wear armor. The prompt for which
inventory item to use will only list accessories, but choosing an
unlisted item of armor will attempt to wear it. (See the `W' command
below. It lists armor as the inventory choices but will accept an
accessory and attempt to put that on.) 

@item ^P
Repeat previous message.

Subsequent `@math{^P}'s repeat earlier messages. For some interfaces, the
behavior can be varied via the msg@math{_window} option. 

@item q
Quaff (drink) something (potion, water, etc).

@item Q
Select an object for your quiver, quiver sack, or just
generally at the ready (only one of these is available at a time).
You can then throw this (or one of these) using the `f' command. 

@item r
Read a scroll or spellbook.

@item R
Remove a worn accessory (ring, amulet, or blindfold).

If you're wearing more than one, you'll be prompted for which one to
 remove. When you're only wearing one, then by default it will be
 removed without asking, but you can set the paranoid@math{_confirmation}
 option to require a prompt. 

This command may also be used to take off armor. The prompt for
which inventory item to remove only lists worn accessories, but an
item of worn armor can be chosen.  (See the `T' command below. It
lists armor as the inventory choices but will accept an accessory
and attempt to remove it.)  

@item ^R
Redraw the screen.

@item s
Search for secret doors and traps around you.  It usually
takes several tries to find something. Can also be used to figure
out whether there is still a monster at an adjacent "remembered,
unseen monster" marker.

@item S
Save the game (which suspends play and exits the program). The
saved game will be restored automatically the next time you play
using the same character name. In normal play, once a saved game is
restored the file used to hold the saved data is deleted. In
explore mode, once restoration is accomplished you are asked
whether to keep or delete the file. Keeping the file makes it
feasible to play for a while then quit without saving and later
restore again. There is no "save current game state and keep
playing" command, not even in explore mode where saved game files
can be kept and re-used.

@item t
Throw an object or shoot a projectile. There's no separate
"shoot" command. If you throw an arrow while wielding a bow, you
are shooting that arrow and any weapon skill bonus or penalty for
bow applies. If you throw an arrow while not wielding a bow, you
are throwing it by hand and it will generally be less effective
than when shot. See also `f' (fire) for throwing or shooting an
item preselected via the `Q' (quiver) command.

@item T
Take off armor.qq If you're wearing more than one piece, you'll
be prompted for which one to take off. (Note that this treats a
cloak covering a suit and/or a shirt, or a suit covering a shirt,
as if the underlying items weren't there.) When you're only wearing
one, then by default it will be taken off without asking, but you
can set the paranoid@math{_confirmation} option to require a prompt.

This command may also be used to remove accessories.  The prompt
for which inventory item to take off only lists worn armor, but a
worn accessory can be chosen.  (See the `R' command above. It lists
accessories as the inventory choices but will accept an item of
armor and attempt to take it off.)

@item ^T
Teleport, if you have the ability.

@item v
Display version number.

@item V
Display the game history.

@item w
Wield weapon.

@item w-
wield nothing, use your bare (or gloved) hands.

Some characters can wield two weapons at once; use the `X' command
 (or the "#twoweapon" extended command) to do so. 

@item W
Wear armor. This command may also be used to put on an
accessory (ring, amulet, or blindfold). The prompt for which
inventory item to use will only list armor, but choosing an
unlisted accessory will attempt to put it on. (See the `P' command
above. It lists accessories as the inventory choices but will
accept an item of armor and attempt to wear it.)

@item x
Exchange your wielded weapon with the item in your alternate
weapon slot. 

The latter is used as your secondary weapon when engaging in
 two-weapon combat. Note that if one of these slots is empty, the
 exchange still takes place. 

@item X
Toggle two-weapon combat, if your character can do it. Also
available via the "#twoweapon" extended command. 

(In versions prior to 3.6 this was the command to switch from normal
 play to "explore mode", also known as "discovery mode", which has
 now been moved to "#exploremode".) 

@item ^X
Display basic information about your character. Displays
name, role, race, gender (unless role name makes that redundant,
such as Caveman or Priestess), and alignment, along with your
patron deity and his or her opposition. It also shows most of the
various items of information from the status line(s) in a less
terse form, including several additional things which don't appear
in the normal status display due to space considerations. In normal
play, that's all that `@math{^X}' displays. In explore mode, the role and
status feedback is augmented by the information provided by
enlightenment magic.

@item z
Zap a wand.

@item z.
to aim at yourself, use `.' for the direction.

@item Z
Zap (cast) a spell.

@item Z@.
to cast at yourself, use `.' for the direction.

@item ^Z
Suspend the game (UNIX@footnote{(R)UNIX is a registered trademark of The Open Group} versions with job control only).

@item :
Look at what is here.

@item ;
Show what type of thing a visible symbol corresponds to.

@item ,
Pick up some things from the floor beneath you. May be preceded
by `m' to force a selection menu. 

@item @@
Toggle the autopickup option on and off.

@item ^
Ask for the type of an adjacent trap you found earlier.

@item )
Tell what weapon you are wielding.

@item [
Tell what armor you are wearing.

@item =
Tell what rings you are wearing.

@item "
Tell what amulet you are wearing.

@item (
Tell what tools you are using.

@item *
Tell what equipment you are using. Combines the preceding five
type-specific commands into one. 

@item $
Count your gold pieces.

@item +
List the spells you know.

Using this command, you can also rearrange the order in which
 your spells are listed, either by sorting the entire list or by
 picking one spell from the menu then picking another to swap places
 with it.  Swapping pairs of spells changes their casting letters, so
 the change lasts after the current `+' command finishes. Sorting the
 whole list is temporary.  To make the most recent sort order persist
 beyond the current `+' command, choose the sort option again and
 then pick "reassign casting letters".  (Any spells learned after
 that will be added to the end of the list rather than be inserted
 into the sorted ordering.) 

@item \
Show what types of objects have been discovered.

@item `
Show discovered types for one class of objects.

@item !
Escape to a shell.

@item #
Perform an extended command.
@end table

@node Extended commands
@section Extended commands

As you can see, the authors of NetHack used up all the letters, so
this is a way to introduce the less frequently used commands. What
extended commands are available depends on what features the game
was compiled with. 

@table @asis
@item #adjust
Adjust inventory letters (most useful when the fixinv
option is "on"). Autocompletes. Default key is `M-a'.

This command allows you to move an item from one particular inventory
 slot to another so that it has a letter which is more meaningful for
 you or that it will appear in a particular location when inventory
 listings are displayed. You can move to a currently empty slot, or
 if the destination is occupied -- and won't merge -- the item there
 will swap slots with the one being moved. "#adjust" can also be used
 to split a stack of objects; when choosing the item to adjust, enter
 a count prior to its letter. 

Adjusting without a count used to collect all compatible stacks when
 moving to the destination.  That behavior has been changed; to
 gather compatible stacks, "#adjust" a stack into its own inventory
 slot. If it has a name assigned, other stacks with the same name or
 with no name will merge provided that all their other attributes
 match. If it does not have a name, only other stacks with no name
 are eligible. In either case, otherwise compatible stacks with a
 different name will not be merged. This contrasts with using
 "#adjust" to move from one slot to a different slot. In that
 situation, moving (no count given) a compatible stack will merge if
 either stack has a name when the other doesn't and give that name to
 the result, while splitting (count given) will ignore the source
 stack's name when deciding whether to merge with the destination
 stack.  

@item #annotate
Allows you to specify one line of text to associate
with the current dungeon level. All levels with annotations are
displayed by the "#overview" command. Autocompletes. Default key is
`M-A', and also `@math{^N}' if number@math{_pad} is on. 

@item #apply
Apply (use) a tool such as a pick-axe, a key, or a
lamp. Default key is `a'. 

If the tool used acts on items on the floor, using the `m' prefix
 skips those items. 

If used on a wand, that wand will be broken, releasing its magic in
 the process. Confirmation is required. 

@item #attributes
Show your attributes. Default key is `@math{^X}'.

@item #autopickup
Toggle the autopickup option on/off. Default key is
`@@'. 

@item #call
Call (name) a monster, or an object in inventory, on the
floor, or in the discoveries list, or add an annotation for the
current level (same as "#annotate"). Default key is `C'. 

@item #cast
Cast a spell. Default key is `Z'.

@item #chat
Talk to someone. Default key is `M-c'.

@item #close
Close a door. Default key is `c'.

@item #conduct
List voluntary challenges you have maintained.
Autocompletes. Default key is `M-C'. 
@end table

See the section below entitled "Conduct" for details.

@table @asis
@item #dip
Dip an object into something. Autocompletes. Default key isq
`M-d'.

@item #down
Go down a staircase. Default key is `>'.

@item #drop
Drop an item. Default key is `d'.

@item #droptype
Drop specific item types. Default key is `D'.

@item #eat
Eat something. Default key is `e'. The `m' prefix skips
eating items on the floor. 

@item #engrave
Engrave writing on the floor. Default key is `E'.

@item #enhance
Advance or check weapon and spell
skills. Autocompletes. Default key is `M-e'. 

@item #exploremode
Enter the explore mode.

Requires confirmation; default response is n (no). To really switch
 to explore mode, respond with y. You can set the
 paranoid@math{_confirmation}:quit option to require a response of yes
 instead.   

@item #fire
Fire ammunition from quiver. Default key is `f'.

@item #force
Force a lock. Autocompletes. Default key is `M-f'.

@item #glance
Show what type of thing a map symbol corresponds
to. Default key is `;'. 

@item #help
Show the help menu. Default key is `?', and also `h' if
number@math{_pad} is on. 

@item #herecmdmenu
Show a menu of possible actions in your current
location. 

@item #history
Show long version and game history. Default key is
`V'. 

@item #inventory
Show your inventory. Default key is `i'.

@item #inventtype
Inventory specific item types. Default key is `I'. 

@item #invoke
Invoke an object's special
powers. Autocompletes. Default key is `M-i'. 

@item #jump
Jump to another location. Autocompletes.  Default key is
`M-j', and also `j' if number@math{_pad} is on. 

@item #kick
Kick something. Default key is `@math{^D}', and `k' if number@math{_pad}
is on. 

@item #known
Show what object types have been discovered. Default key
is `\'. 

@item #knownclass
Show discovered types for one class of
objects. Default key is ``'. 

@item #levelchange
Change your experience level.  Autocompletes.
Debug mode only. 

@item #lightsources
Show mobile light sources. Autocompletes. Debug
mode only. 

@item #look
Look at what is here, under you. Default key is `:'.

@item #loot
Loot a box or bag on the floor beneath you, or the saddle
from a steed standing next to you. Autocompletes.  Precede with the
`m' prefix to skip containers at your location and go directly to
removing a saddle. Default key is `M-l', and also `l' if number@math{_pad}
is on. 

@item #monster
Use a monster's special ability (when polymorphed into
monster form). Autocompletes. Default key is `M-m'. 

@item #name
Name a monster, an individual object, or a type of
object. Same as "#call". Autocompletes. Default keys are `N',
`M-n', and `M-N'. 

@item #offer
Offer a sacrifice to the gods. Autocompletes. Default key
is `M-o'. 

You'll need to find an altar to have any chance at success. Corpses
 of recently killed monsters are the fodder of choice.  

The `m' prefix skips offering any items which are on the altar.

@item #open
Open a door. Default key is `o'.

@item #options
Show and change option settings. Default key is `O'.

@item #overview
Display information you've discovered about the
dungeon. Any visited level (unless forgotten due to amnesia) with
an annotation is included, and many things (altars, thrones,
fountains, and so on; extra stairs leading to another dun- geon
branch) trigger an automatic annotation.  If dungeon overview is
chosen during end-of-game disclosure, every visited level will be
included regardless of annotations.  Autocompletes. Default keys
are `@math{^O}', and `M-O'.  

@item #panic
Test the panic routine. Terminates the current
game. Autocompletes. Debug mode only. Asks for confirmation;
default is n (no); continue playing. To really panic, respond with
y. You can set the paranoid@math{_confirmation}:quit option to require a
response of yes instead.   

@item #pay
Pay your shopping bill. Default key is `p'.

@item #pickup
Pick up things at the current location. Default key is
`,'. The `m' prefix forces use of a menu. 

@item #polyself
Polymorph self. Autocompletes. Debug mode only.

@item #pray
Pray to the gods for help. Autocompletes. Default key is
`M-p'. Praying too soon after receiving prior help is a bad
idea. (Hint: entering the dungeon alive is treated as having
received help. You probably shouldn't start off a new game by
praying right away.) Since using this command by accident can cause
trouble, there is an option to make you confirm your intent before
praying. It is enabled by default, and you can reset the
paranoid@math{_confirmation} option to disable it. 

@item #prevmsg
Show previously displayed game messages.  Default key
is `@math{^P}'. 

@item #puton
Put on an accessory (ring, amulet, etc). Default key is
`P'. 

@item #quaff
Quaff (drink) something. Default key is `q'.

@item #quit
Quit the program without saving your game.
Autocompletes. Default key is `M-q'. 

Since using this command by accident would throw away the current
game, you are asked to confirm your intent before quitting. Default
response is n (no); continue playing. To really quit, respond with
y. You can set the paranoid@math{_confirmation}:quit option to require a
response of yes instead. 

@item #quiver
Select ammunition for quiver. Default key is `Q'.

@item #read
Read a scroll, a spellbook, or something else. Default key
is `r'. 

@item #redraw
Redraw the screen. Default key is `@math{^R}', and also `@math{^L}' if
number@math{_pad} is on. 

@item #remove
Remove an accessory (ring, amulet, etc). Default key is
`R'. 

@item #ride
Ride (or stop riding) a saddled creature.
Autocompletes. Default key is `M-R'. 

@item #rub
Rub a lamp or a stone. Autocompletes. Default key is `M-
r'. 

@item #save
Save the game and exit the program. Default key is `S'.

@item #search
Search for traps and secret doors around you.  Default
key is `s'. 

@item #seeall
Show all equipment in use. Default key is `*'.

@item #seeamulet
Show the amulet currently worn. Default key is `"'.

@item #seearmor
Show the armor currently worn. Default key is `['.

@item #seegold
Count your gold. Default key is `$'.

@item #seenv
Show seen vectors. Autocompletes. Debug mode only.

@item #seerings
Show the ring(s) currently worn. Default key is `='. 

@item #seespells
List and reorder known spells. Default key is `+'.

@item #seetools
Show the tools currently in use. Default key is `('. 

@item #seetrap
Show the type of an adjacent trap. Default key is `^'. 

@item #seeweapon
Show the weapon currently wielded. Default key is
`)'. 

@item #shell
Do a shell escape. Default key is `!'.

@item #sit
Sit down. Autocompletes. Default key is `M-s'.

@item #stats
Show memory usage statistics. Autocompletes. Debug mode
only. 

@item #suspend
Suspend the game. Default key is `@math{^Z}'.

@item #swap
Swap wielded and secondary weapons. Default key is `x'. 

@item #takeoff
Take off one piece of armor. Default key is `T'.

@item #takeoffall
Remove all armor. Default key is `A'.

@item #teleport
Teleport around the level. Default key is `@math{^T}'.

@item #terrain
Show bare map without displaying monsters, objects, or
traps. Autocompletes. 

@item #therecmdmenu
Show a menu of possible actions in a location next
to you.  

@item #throw
Throw something. Default key is `t'.

@item #timeout
Look at the timeout queue. Autocompletes. Debug mode
only. 

@item #tip
Tip over a container (bag or box) to pour out its
contents. Autocompletes. Default key is `M-T'. The `m' prefix makes
the command use a menu. 

@item #travel
Travel to a specific location on the map. Default key is
`_'. Using the "request menu" prefix shows a menu of interesting
targets in sight without asking to move the cursor. When picking a
target with cursor and the autodescribe option is on, the top line
will show "(no travel path)" if your character does not know of a
path to that location. 

@item #turn
Turn undead away. Autocompletes. Default key is `M-t'.

@item #twoweapon
Toggle two-weapon combat on or
off. Autocompletes. Default key is `X', and also `M-2' if
number@math{_pad} is off. Note that you must use suitable weapons for this
type of combat, or it will be automatically turned off. 

@item #untrap
Untrap something (trap, door, or chest). Default key is
`M-u', and `u' if number@math{_pad} is on. 

In some circumstances it can also be used to rescue trapped
monsters. 

@item #up
Go up a staircase. Default key is `<'.

@item #vanquished
List vanquished monsters. Autocompletes. Debug mode
only. 

@item #version
Print compile time options for this version of
NetHack. Autocompletes. Default key is `M-v'. 

@item #versionshort
Show version string. Default key is `v'.

@item #vision
Show vision array. Autocompletes. Debug mode only.

@item #wait
Rest one move while doing nothing. Default key is `.', and
also ` ' if rest@math{_on}@math{_space} is on. 

@item #wear
Wear a piece of armor. Default key is `W'.

@item #whatdoes
Tell what a key does. Default key is `&'.

@item #whatis
Show what type of thing a symbol corresponds to.
Default key is `/'. 

@item #wield
Wield a weapon. Default key is `w'.

@item #wipe
Wipe off your face. Autocompletes. Default key is `M-w'. 

@item #wizbury
Bury objects under and around you. Autocompletes. Debug
mode only. 

@item #wizdetect
Search for hidden things (secret doors or traps or
unseen monsters) within a modest radius. Autocompletes. Debug mode
only. Default key is `@math{^E}'. 

@item #wizgenesis
Create a monster. May be prefixed by a count to
create more than one. Autocompletes. Debug mode only. Default key
is `@math{^G}'. 

@item #wizidentify
Identify all items in
inventory. Autocompletes. Debug mode only. Default key is `@math{^I}'. 

@item #wizintrinsic
Set one or more intrinsic
attributes. Autocompletes. Debug mode only. 

@item #wizlevelport
Teleport to another level. Autocompletes. Debug
mode only. Default key is `@math{^V}'. 

@item #wizmap
map the level.  Autocompletes. Debug mode only. Default
key is `@math{^F}'. 

@item #wizrumorcheck
Verify rumor boundaries. Autocompletes. Debug
mode only. 

@item #wizsmell
Smell monster. Autocompletes. Debug mode only.

@item #wizwhere
Show locations of special levels.  Autocompletes.
Debug mode only. 

@item #wizwish
Wish for something. Autocompletes. Debug mode
only. Default key is `@math{^W}'.  

@item #wmode
Show wall modes. Autocompletes. Debug mode only.

@item #zap
Zap a wand. Default key is `z'.

@item #?
Help menu: get the list of available extended commands. 
@end table


If your keyboard has a meta key (which, when pressed in combination
with another key, modifies it by setting the "meta" [8th, or "high"]
bit), you can invoke many extended commands by meta-ing the first
letter of the command. 

In NT, OS/2, PC and ST NetHack, the "Alt" key can be used in this
fashion; on the Amiga, set the altmeta option to get this behavior.
On other systems, if typing "Alt" plus another key transmits a two
character sequence consisting of an Escape fol- lowed by the other
key, you may set the altmeta option to have NetHack combine them into
meta+key. 

@table @asis
@item M-?
#? (not supported by all platforms)

@item M-2
#twoweapon (unless the number@math{_pad} option is enabled)

@item M-a
#adjust

@item M-A
#annotate

@item M-c
#chat

@item M-C
#conduct

@item M-d
#dip

@item M-e
#enhance

@item M-f
#force

@item M-i
#invoke

@item M-j
#jump

@item M-l
#loot

@item M-m
#monster

@item M-n
#name

@item M-o
#offer

@item M-O
#overview

@item M-p
#pray

@item M-q
#quit

@item M-r
#rub

@item M-R
#ride

@item M-s
#sit

@item M-t
#turn

@item M-T
#tip

@item M-u
#untrap

@item M-v
#version

@item M-w
#wipe
@end table



If the number@math{_pad} option is on, some additional letter commands are
available: 

@table @asis
@item h  
#help

@item j  
#jump

@item k  
#kick

@item l  
#loot

@item N  
#name

@item u  
#untrap
@end table

@node Rooms and corridors
@chapter Rooms and corridors

Rooms and corridors in the dungeon are either lit or dark. Any lit
areas within your line of sight will be displayed; dark areas are
only displayed if they are within one space of you. Walls and
corridors remain on the map as you explore them. 

Secret corridors are hidden. You can find them with the `s' (search)
command. 

@menu
* Doorways::
* Traps (`^')::
* Stairs and ladders (`<', `>'): Stairs and ladders (`<' `>'). 
* Shops and shopping::
@end menu

@node Doorways
@section Doorways

Doorways connect rooms and corridors. Some doorways have no doors;
you can walk right through. Others have doors in them, which may be
open, closed, or locked. To open a closed door, use the `o' (open)
command; to close it again, use the `c' (close) command. 

You can get through a locked door by using a tool to pick the lock
with the `a' (apply) command, or by kicking it open with the `@math{^D}'
(kick) command. 

Open doors cannot be entered diagonally; you must approach them
straight on, horizontally or vertically.  Doorways without doors are
not restricted in this fashion. 

Doors can be useful for shutting out monsters. Most monsters cannot
open doors, although a few don't need to (for example, ghosts can
walk through doors). 

Secret doors are hidden.  You can find them with the `s' (search)
command. Once found they are in all ways equivalent to normal doors.

@node Traps (`^')
@section Traps (`^')

There are traps throughout the dungeon to snare the unwary
delver. For example, you may suddenly fall into a pit and be stuck
for a few turns trying to climb out. Traps don't appear on your map
until you see one triggered by moving onto it, see something fall
into it, or you discover it with the `s' (search) command. Monsters
can fall prey to traps, too, which can be a very useful defensive
strategy. 

There is a special pre-mapped branch of the dungeon based on the
classic computer game "Sokoban." The goal is to push the boulders
into the pits or holes. With careful foresight, it is possible to
complete all of the levels according to the traditional rules of
Sokoban. Some allowances are permitted in case the player gets stuck;
however, they will lower your luck.

@node Stairs and ladders (`<' `>')
@section Stairs and ladders (`<', `>')

In general, each level in the dungeon will have a staircase going up
(`<') to the previous level and another going down (`>') to the next
level. There are some exceptions though.  For instance, fairly early
in the dungeon you will find a level with two down staircases, one
continuing into the dungeon and the other branching into an area
known as the Gnomish Mines. Those mines eventually hit a dead end, so
after exploring them (if you choose to do so), you'll need to climb
back up to the main dungeon. 

When you traverse a set of stairs, or trigger a trap which sends you
to another level, the level you're leaving will be deactivated and
stored in a file on disk. If you're moving to a previously visited
level, it will be loaded from its file on disk and reactivated. If
you're moving to a level which has not yet been visited, it will be
created (from scratch for most random levels, from a template for
some "special" levels, or loaded from the remains of an earlier game
for a "bones" level as briefly described below). Monsters are only
active on the current level; those on other levels are essentially
placed into stasis. 

Ordinarily when you climb a set of stairs, you will arrive on the
corresponding staircase at your destination.  However, pets (see
below) and some other monsters will follow along if they're close
enough when you travel up or down stairs, and occasionally one of
these creatures will displace you during the climb. When that occurs,
the pet or other monster will arrive on the staircase and you will
end up nearby. 

Ladders serve the same purpose as staircases, and the two types of
inter-level connections are nearly indistinguishable during game
play.

@node Shops and shopping
@section Shops and shopping

Occasionally you will run across a room with a shopkeeper near the
door and many items lying on the floor.  You can buy items by picking
them up and then using the `p' command. You can inquire about the
price of an item prior to picking it up by using the "#chat" command
while standing on it. Using an item prior to paying for it will incur
a charge, and the shopkeeper won't allow you to leave the shop until
you have paid any debt you owe. 

You can sell items to a shopkeeper by dropping them to the floor
while inside a shop. You will either be offered an amount of gold and
asked whether you're willing to sell, or you'll be told that the
shopkeeper isn't interested (generally, your item needs to be
compatible with the type of merchandise carried by the shop). 

If you drop something in a shop by accident, the shopkeeper will
usually claim ownership without offering any compensation. You'll
have to buy it back if you want to reclaim it. 

Shopkeepers sometimes run out of money. When that happens, you'll be
offered credit instead of gold when you try to sell something. Credit
can be used to pay for purchases, but it is only good in the shop
where it was obtained; other shopkeepers won't honor it. (If you
happen to find a "credit card" in the dungeon, don't bother trying to
use it in shops; shopkeepers will not accept it.) 

The `$' command, which reports the amount of gold you are carrying
(in inventory, not inside bags or boxes), will also show current shop
debt or credit, if any. The "Iu" command lists unpaid items (those
which still belong to the shop) if you are carrying any. The "Ix"
command shows an inventory-like display of any unpaid items which
have been used up, along with other shop fees, if any. 

@menu
* Shop idiosyncrasies::
@end menu

@node Shop idiosyncrasies
@subsection Shop idiosyncrasies

Several aspects of shop behavior might be unexpected.

@itemize
@item
The price of a given item can vary due to a variety of factors.

@item
A shopkeeper treats the spot immediately inside the door as if it
were outside the shop. 

@item
While the shopkeeper watches you like a hawk, he will generally
ignore any other customers. 

@item
If a shop is "closed for inventory," it will not open of its own
accord. 

@item
Shops do not get restocked with new items, regardless of inventory
depletion. 
@end itemize

@node Monsters
@chapter Monsters

Monsters you cannot see are not displayed on the screen. Beware!  You
may suddenly come upon one in a dark place. Some magic items can help
you locate them before they locate you (which some monsters can do
very well). 

The commands `/' and `;' may be used to obtain information about
those monsters who are displayed on the screen.  The command "#name"
(by default bound to `C'), allows you to assign a name to a monster,
which may be useful to help distinguish one from another when
multiple monsters are present. Assigning a name which is just a space
will remove any prior name. 

The extended command "#chat" can be used to interact with an adjacent
monster. There is no actual dialog (in other words, you don't get to
choose what you'll say), but chatting with some monsters such as a
shopkeeper or the Oracle of Delphi can produce useful results. 

@menu
* Fighting::
* Your pet::
* Steeds::
* Bones levels::
* Persistence of Monsters::
@end menu

@node Fighting
@section Fighting

If you see a monster and you wish to fight it, just attempt to walk
into it.  Many monsters you find will mind their own business unless
you attack them. Some of them are very dangerous when
angered. Remember: discretion is the better part of valor. 

In most circumstances, if you attempt to attack a peaceful monster by
moving into its location, you'll be asked to confirm your intent.  By
default an answer of `y' acknowledges that intent, which can be error
prone if you're using `y' to move.  You can set the
paranoid@math{_confirmation} option to require a response of "yes" instead. 

If you can't see a monster (if it is invisible, or if you are
blinded), the symbol `I' will be shown when you learn of its
presence. If you attempt to walk into it, you will try to fight it
just like a monster that you can see; of course, if the monster has
moved, you will attack empty air. If you guess that the monster has
moved and you don't wish to fight, you can use the `m' command to
move without fighting; likewise, if you don't remember a monster but
want to try fighting anyway, you can use the `F' command.

@node Your pet
@section Your pet

You start the game with a little dog (`d'), kitten (`f'), or pony
(`u'), which follows you about the dungeon and fights monsters with
you. Like you, your pet needs food to survive.  Dogs and cats usually
feed themselves on fresh carrion and other meats; horses need
vegetarian food which is harder to come by. If you're worried about
your pet or want to train it, you can feed it, too, by throwing it
food. A properly trained pet can be very useful under certain
circumstances. 

Your pet also gains experience from killing monsters, and can grow
over time, gaining hit points and doing more damage. Initially, your
pet may even be better at killing things than you, which makes pets
useful for low-level characters. 

Your pet will follow you up and down staircases if it is next to you
when you move. Otherwise your pet will be stranded and may become
wild. Similarly, when you trigger certain types of traps which alter
your location (for instance, a trap door which drops you to a lower
dungeon level), any adjacent pet will accompany you and any
non-adjacent pet will be left behind. Your pet may trigger such traps
itself; you will not be carried along with it even if adjacent at the
time.

@node Steeds
@section Steeds

Some types of creatures in the dungeon can actually be ridden if you
have the right equipment and skill. Convincing a wild beast to let
you saddle it up is difficult to say the least. Many a dungeoneer has
had to resort to magic and wizardry in order to forge the
alliance. Once you do have the beast under your control however, you
can easily climb in and out of the saddle with the "#ride"
command. Lead the beast around the dungeon when riding, in the same
manner as you would move yourself. It is the beast that you will see
displayed on the map. 

Riding skill is managed by the "#enhance" command. See the section on
Weapon proficiency for more information about that. 

Use the `a' (apply) command and pick a saddle in your inventory to
attempt to put that saddle on an adjacent creature. If successful, it
will be transferred to that creature's inventory. 

Use the "#loot" command while adjacent to a saddled creature to try
to remove the saddle from that creature. If successful, it will be
transferred to your inventory.

@node Bones levels
@section Bones levels

You may encounter the shades and corpses of other adventurers (or
even former incarnations of yourself!) and their personal
effects. Ghosts are hard to kill, but easy to avoid, since they're
slow and do little damage. You can plunder the deceased adventurer's
possessions; however, they are likely to be cursed. Beware of
whatever killed the former player; it is probably still lurking
around, gloating over its last victory.

@node Persistence of Monsters
@section Persistence of Monsters

Monsters (a generic reference which also includes humans and pets)
are only shown while they can be seen or otherwise sensed. Moving to
a location where you can't see or sense a monster any more will
result in it disappearing from your map, similarly if it is the one
who moved rather than you. 

However, if you encounter a monster which you can't see or sense --
perhaps it is invisible and has just tapped you on the noggin -- a
special "remembered, unseen monster" marker will be displayed at the
location where you think it is. That will persist until you have
proven that there is no monster there, even if the unseen monster
moves to another location or you move to a spot where the marker's
location ordinarily wouldn't be seen any more.

@node Objects
@chapter Objects

When you find something in the dungeon, it is common to want to pick
it up. In NetHack, this is accomplished automatically by walking over
the object (unless you turn off the autopickup option (see below), or
move with the `m' prefix (see above)), or manually by using the `,'
command. 

If you're carrying too many items, NetHack will tell you so and you
won't be able to pick up anything more.  Otherwise, it will add the
object(s) to your pack and tell you what you just picked up. 

As you add items to your inventory, you also add the weight of that
object to your load. The amount that you can carry depends on your
strength and your constitution. The stronger and sturdier you are,
the less the additional load will affect you. There comes a point,
though, when the weight of all of that stuff you are carrying around
with you through the dungeon will encumber you. Your reactions will
get slower and you'll burn calories faster, requiring food more
frequently to cope with it. Eventually, you'll be so overloaded that
you'll either have to discard some of what you're carrying or
collapse under its weight. 

NetHack will tell you how badly you have loaded yourself. If you are
encumbered, one of the conditions  "Burdened", "Stressed",
"Strained", "Overtaxed" or "Overloaded" will be shown on the bottom
line status display. 

When you pick up an object, it is assigned an inventory letter.  Many
commands that operate on objects must ask you to find out which
object you want to use.  When NetHack asks you to choose a particular
object you are carrying, you are usually presented with a list of
inventory letters to choose from (see Commands, above). 

Some objects, such as weapons, are easily differentiated. Others,
like scrolls and potions, are given descriptions which vary according
to type. During a game, any two objects with the same description are
the same type.  However, the descriptions will vary from game to
game. 

When you use one of these objects, if its effect is obvious, NetHack
will remember what it is for you. If its effect isn't extremely
obvious, you will be asked what you want to call this type of object
so you will recognize it later. You can also use the "#name" command,
for the same purpose at any time, to name all objects of a particular
type or just an individual object. When you use "#name" on an object
which has already been named, specifying a space as the value will
remove the prior name instead of assigning a new one. 

@menu
* Curses and Blessings::
* Weapons (`)')::
* Armor (`[')::
* Food (`%')::
* Scrolls (`?')::
* Potions (`!')::
* Wands (`/')::
* Rings (`=')::
* Spellbooks (`+')::
* Tools (`(')::
* Amulets (`"')::
* Gems (`*')::
* Large rocks (``')::
* Gold (`$')::
* Persistence of Objects::
@end menu

@node Curses and Blessings
@section Curses and Blessings

Any object that you find may be cursed, even if the object is
otherwise helpful. The most common effect of a curse is being stuck
with (and to) the item. Cursed weapons weld themselves to your hand
when wielded, so you cannot unwield them.  Any cursed item you wear
is not removable by ordinary means. In addition, cursed arms and
armor usually, but not always, bear negative enchantments that make
them less effective in combat. Other cursed objects may act poorly or
detrimentally in other ways. 

Objects can also be blessed.  Blessed items usually work better or
more beneficially than normal uncursed items. For example, a blessed
weapon will do more damage against demons. 

Objects which are neither cursed nor blessed are referred to as
uncursed.  They could just as easily have been described as
unblessed, but the uncursed designation is what you will see within
the game.  A "glass half full versus glass half empty" situation;
make of that what you will. 

There are magical means of bestowing or removing curses upon objects,
so even if you are stuck with one, you can still have the curse
lifted and the item removed. Priests and Priestesses have an innate
sensitivity to this property in any object, so they can more easily
avoid cursed objects than other character roles. 

An item with unknown status will be reported in your inven- tory with
no prefix. An item which you know the state of will be distinguished
in your inventory by the presence of the word "cursed", "uncursed" or
"blessed" in the description of the item. In some cases "uncursed"
will be omitted as being redundant when enough other information is
displayed. The implicit@math{_uncursed} option can be used to control this;
toggle it off to have "uncursed" be displayed even when that can be
deduced from other attributes.

@node Weapons (`)')
@section Weapons (`)')

Given a chance, most monsters in the Mazes of Menace will
gratuitously try to kill you. You need weapons for self-defense
(killing them first).  Without a weapon, you do only 1-2 hit points
of damage (plus bonuses, if any). Monk characters are an exception;
they normally do more damage with bare (or gloved) hands than they do
with weapons. 

There are wielded weapons, like maces and swords, and thrown weapons,
like arrows and spears. To hit monsters with a weapon, you must wield
it and attack them, or throw it at them. You can simply elect to
throw a spear. To shoot an arrow, you should first wield a bow, then
throw the arrow. Crossbows shoot crossbow bolts. Slings hurl rocks
and (other) stones (like gems). 

Enchanted weapons have a "plus" (or "to hit enhancement" which can be
either positive or negative) that adds to your chance to hit and the
damage you do to a monster. The only way to determine a weapon's
enchantment is to have it magically identified somehow. Most weapons
are subject to some type of damage like rust. Such "erosion" damage
can be repaired. 

The chance that an attack will successfully hit a monster, and the
amount of damage such a hit will do, depends upon many factors. Among
them are: type of weapon, quality of weapon (enchantment and/or
erosion), experience level, strength, dexterity, encumbrance, and
proficiency (see below).  The monster's armor class -- a general
defense rating, not necessarily due to wearing of armor -- is a
factor too; also, some monsters are particularly vulnerable to
certain types of weapons. 

Many weapons can be wielded in one hand; some require both
hands. When wielding a two-handed weapon, you can not wear a shield,
and vice versa. When wielding a one-handed weapon, you can have
another weapon ready to use by setting things up with the `x'
command, which exchanges your primary (the one being wielded) and
alternate weapons. And if you have proficiency in the "two weapon
combat" skill, you may wield both weapons simultaneously as primary
and secondary; use the `X' command to engage or disengage that.  Only
some types of characters (barbarians, for instance) have the
necessary skill available. Even with that skill, using two weapons at
once incurs a penalty in the chance to hit your target compared to
using just one weapon at a time. 

There might be times when you'd rather not wield any weapon at
all. To accomplish that, wield `-', or else use the `A' command
which allows you to unwield the current weapon in addition to taking
off other worn items. 

Those of you in the audience who are AD&D players, be aware that each
weapon which existed in AD&D does roughly the same damage to monsters
in NetHack. Some of the more obscure weapons (such as the aklys,
lucern hammer, and bec-de-corbin) are defined in an appendix to
Unearthed Arcana, an AD&D supplement. 

The commands to use weapons are `w' (wield), `t' (throw), `f' (fire,
an alternate way of throwing), `Q' (quiver), `x' (exchange), `X'
(twoweapon), and "#enhance" (see below). 

@menu
* Throwing and shooting::
* Weapon proficiency::
* Two-Weapon combat::
@end menu

@node Throwing and shooting
@subsection Throwing and shooting

You can throw just about anything via the `t' command. It will prompt
for the item to throw; picking `?' will list things in your inventory
which are considered likely to be thrown, or picking `*' will list
your entire inventory. After you've chosen what to throw, you will be
prompted for a direction rather than for a specific target. The
distance something can be thrown depends mainly on the type of object
and your strength. Arrows can be thrown by hand, but can be thrown
much farther and will be more likely to hit when thrown while you are
wielding a bow. 

You can simplify the throwing operation by using the `Q' command to
select your preferred "missile", then using the `f' command to throw
it.  You'll be prompted for a direction as above, but you don't have
to specify which item to throw each time you use `f'. There is also
an option, autoquiver, which has NetHack choose another item to
automatically fill your quiver (or quiver sack, or have at the ready)
when the inventory slot used for `Q' runs out. 

Some characters have the ability to fire a volley of multiple items
in a single turn. Knowing how to load several rounds of ammunition at
once -- or hold several missiles in your hand -- and still hit a
target is not an easy task. Rangers are among those who are adept at
this task, as are those with a high level of proficiency in the
relevant weapon skill (in bow skill if you're wielding one to shoot
arrows, in crossbow skill if you're wielding one to shoot bolts, or
in sling skill if you're wielding one to shoot stones). The number of
items that the character has a chance to fire varies from turn to
turn. You can explicitly limit the number of shots by using a numeric
prefix before the `t' or `f' command. For example, "2f" (or "n2f" if
using number@math{_pad} mode) would ensure that at most 2 arrows are shot
even if you could have fired 3.  If you specify a larger number than
would have been shot ("4f" in this example), you'll just end up
shooting the same number (3, here) as if no limit had been
specified. Once the volley is in motion, all of the items will travel
in the same direction; if the first ones kill a monster, the others
can still continue beyond that spot.

@node Weapon proficiency
@subsection Weapon proficiency

You will have varying degrees of skill in the weapons available.
Weapon proficiency, or weapon skills, affect how well you can use
particular types of weapons, and you'll be able to improve your
skills as you progress through a game, depending on your role, your
experience level, and use of the weapons. 

For the purposes of proficiency, weapons have been divided up  into
various groups such as daggers, broadswords, and polearms. Each role
has a limit on what level of proficiency a character can achieve for
each group. For instance, wizards can become highly skilled in
daggers or staves but not in swords or bows. 

The "#enhance" extended command is used to review current weapons
proficiency (also spell proficiency) and to choose which skill(s) to
improve when you've used one or more skills enough to become eligible
to do so. The skill rankings are "none" (sometimes also referred to
as "restricted", because you won't be able to advance), "unskilled",
"basic", "skilled", and "expert".  Restricted skills simply will not
appear in the list shown by "#enhance".  (Divine intervention might
unrestrict a particular skill, in which case it will start at
unskilled and be limited to basic.) Some characters can enhance their
barehanded combat or martial arts skill beyond expert to "master" or
"grand master". 

Use of a weapon in which you're restricted or unskilled will incur a
modest penalty in the chance to hit a monster and also in the amount
of damage done when you do hit; at basic level, there is no penalty
or bonus; at skilled level, you receive a modest bonus in the chance
to hit and amount of damage done; at expert level, the bonus is
higher. A successful hit has a chance to boost your training towards
the next skill level (unless you've already reached the limit for
this skill). Once such training reaches the threshold for that next
level, you'll be told that you feel more confident in your skills. At
that point you can use "#enhance" to increase one or more
skills. Such skills are not increased automatically because there is
a limit to your total overall skills, so you need to actively choose
which skills to enhance and which to ignore.

@node Two-Weapon combat
@subsection Two-Weapon combat

Some characters can use two weapons at once. Setting things up to do
so can seem cumbersome but becomes second nature with use. To wield
two weapons, you need to use the "#twoweapon" command.  But first you
need to have a weapon in each hand. (Note that your two weapons are
not fully equal; the one in the hand you normally wield with is
considered primary and the other one is considered secondary. The
most noticeable difference is after you stop -- or before you begin,
for that matter -- wielding two weapons at once. The primary is your
wielded weapon and the secondary is just an item in your inventory
that's been designated as alternate weapon.) 

If your primary weapon is wielded but your off hand is empty or has
the wrong weapon, use the sequence `x', `w', `x' to first swap your
primary into your off hand, wield whatever you want as secondary
weapon, then swap them both back into the intended hands. If your
secondary or alternate weapon is correct but your primary one is not,
simply use `w' to wield the primary. Lastly, if neither hand holds
the correct weapon, use `w', `x', `w' to first wield the intended
secondary, swap it to off hand, and then wield the primary. 

The whole process can be simplified via use of the push-weapon
option. When it is enabled, then using `w' to wield something causes
the currently wielded weapon to become your alternate weapon. So the
sequence `w', `w' can be used to first wield the weapon you intend to
be secondary, and then wield the one you want as primary which will
push the first into secondary position. 

When in two-weapon combat mode, using the `X' command toggles back to
single-weapon mode. Throwing or dropping either of the weapons or
having one of them be stolen or destroyed will also make you revert
to single-weapon combat.

@node Armor (`[')
@section Armor (`[')

Lots of unfriendly things lurk about; you need armor to protect
yourself from their blows. Some types of armor offer better
protection than others.  Your armor class is a measure of this
protection. Armor class (AC) is measured as in AD&D, with 10 being
the equivalent of no armor, and lower numbers meaning better
armor. Each suit of armor which exists in AD&D gives the same
protection in NetHack. Here is an (incomplete) list of the armor
classes provided by various suits of armor: 

@multitable {aaaaaaaaaaaaaaaaaaaaa} {aa}
@headitem Armor
@tab AC
@item dragon scale mail
@tab 1
@item plate mail
@tab 3
@item crystal plate mail
@tab 3
@item bronze plate mail
@tab 4
@item splint mail
@tab 4
@item banded mail
@tab 4
@item dwarvish mithril-coat
@tab 4
@item elven mithril-coat
@tab 5
@item chain mail
@tab 5
@item orcish chain mail
@tab 6
@item scale mail
@tab 6
@item dragon scales
@tab 7
@item studded leather armor
@tab 7
@item ring mail
@tab 7
@item orcish ring mail
@tab 8
@item leather armor
@tab 8
@item leather jacket
@tab 9
@item no armor
@tab 10
@end multitable


You can also wear other pieces of armor (for example helmets, boots,
shields, cloaks) to lower your armor class even further, but you can
only wear one item of each category (one suit of armor, one cloak,
one helmet, one shield, and so on) at a time. 

If a piece of armor is enchanted, its armor protection will be better
(or worse) than normal, and its "plus" (or minus) will subtract from
your armor class. For example, a +1 chain mail would give you better
protection than normal chain mail, lowering your armor class one unit
further to 4. When you put on a piece of armor, you immediately find
out the armor class and any "plusses" it provides. Cursed pieces of
armor usually have negative enchantments (minuses) in addition to
being unremovable. 

Many types of armor are subject to some kind of damage like
rust. Such damage can be repaired. Some types of armor may inhibit
spell casting. 

The commands to use armor are `W' (wear) and `T' (take off). The `A'
command can also be used to take off armor as well as other worn
items.

@node Food (`%')
@section Food (`%')

Food is necessary to survive. If you go too long without eating you
will faint, and eventually die of starvation.  Some types of food
will spoil, and become unhealthy to eat, if not protected. Food
stored in ice boxes or tins ("cans") will usually stay fresh, but ice
boxes are heavy, and tins take a while to open. 

When you kill monsters, they usually leave corpses which are also
"food."  Many, but not all, of these are edible; some also give you
special powers when you eat them. A good rule of thumb is "you are
what you eat." 

Some character roles and some monsters are vegetarian. Vegetarian
monsters will typically never eat animal corpses, while vegetarian
players can, but with some rather unpleasant side-effects. 

You can name one food item after something you like to eat with the
fruit option. 

The command to eat food is `e'.

@node Scrolls (`?')
@section Scrolls (`?')

Scrolls are labeled with various titles, probably chosen by ancient
wizards for their amusement value (for example "READ ME," or "THANX
MAUD" backwards).  Scrolls disappear after you read them (except for
blank ones, without magic spells on them). 

One of the most useful of these is the scroll of identify, which can
be used to determine what another object is, whether it is cursed or
blessed, and how many uses it has left.  Some objects of subtle
enchantment are difficult to identify without these. 

A mail daemon may run up and deliver mail to you as a scroll of mail
(on versions compiled with this feature). To use this feature on
versions where NetHack mail delivery is triggered by electronic mail
appearing in your system mailbox, you must let NetHack know where to
look for new mail by setting the "MAIL" environment variable to the
file name of your mailbox. You may al- so want to set the
"MAILREADER" environment variable to the file name of your favorite
reader, so NetHack can shell to it when you read the scroll. On
versions of NetHack where mail is randomly generated internal to the
game, these environment variables are ignored. You can disable the
mail daemon by turning off the mail option. 

The command to read a scroll is `r'.

@node Potions (`!')
@section Potions (`!')

Potions are distinguished by the color of the liquid inside the
flask. They disappear after you quaff them. 

Clear potions are potions of water.  Sometimes these are blessed or
cursed, resulting in holy or unholy water. Holy water is the bane of
the undead, so potions of holy water are good things to throw (`t')
at them. It is also sometimes very useful to dip ("#dip") an object
into a potion. 

The command to drink a potion is `q' (quaff).

@node Wands (`/')
@section Wands (`/')

Wands usually have multiple magical charges. Some types of wands
require a direction in which to zap them. You can also zap them at
yourself (just give a `.' or `s' for the direction).  Be warned,
however, for this is often unwise. Other types of wands don't require
a direction. The number of charges in a wand is random and decreases
by one whenever you use it. 

When the number of charges left in a wand becomes zero, attempts to
use the wand will usually result in nothing happening. Occasionally,
however, it may be possible to squeeze the last few mana points from
an otherwise spent wand, destroying it in the process.  A wand may be
recharged by using suitable magic, but doing so runs the risk of
causing it to explode. The chance for such an explosion starts out
very small and increases each time the wand is recharged. 

In a truly desperate situation, when your back is up against the
wall, you might decide to go for broke and break your wand. 

This is not for the faint of heart. Doing so will almost certainly
cause a catastrophic release of magical energies. 

When you have fully identified a particular wand, inventory display
will include additional information in parentheses: the number of
times it has been recharged followed by a colon and then by its
current number of charges. A current charge count of -1 is a special
case indicating that the wand has been cancelled. 

The command to use a wand is `z' (zap). To break one, use the `a'
(apply) command.

@node Rings (`=')
@section Rings (`=')

Rings are very useful items, since they are relatively permanent
magic, unlike the usually fleeting effects of potions, scrolls, and
wands. 

Putting on a ring activates its magic. You can wear only two rings,
one on each ring finger.

Most rings also cause you to grow hungry more rapidly, the rate
varying with the type of ring. 

The commands to use rings are `P' (put on) and `R' (remove).

@node Spellbooks (`+')
@section Spellbooks (`+')

Spellbooks are tomes of mighty magic. When studied with the `r'
(read) command, they transfer to the reader the knowledge of a spell
(and therefore eventually become unreadable) -- unless the attempt
backfires.  Reading a cursed spellbook or one with mystic runes
beyond your ken can be harmful to your health! 

A spell (even when learned) can also backfire when you cast it.  If
you attempt to cast a spell well above your experience level, or if
you have little skill with the appropriate spell type, or cast it at
a time when your luck is particularly bad, you can end up wasting
both the energy and the time required in casting. 

Casting a spell calls forth magical energies and focuses them with
your naked mind. Some of the magical energy released comes from
within you. Casting temporarily drains your magical power, which will
slowly be recovered, and causes you to need ad- ditional food.
Casting of spells also requires practice. With practice, your skill
in each category of spell casting will im- prove. Over time, however,
your memory of each spell will dim, and you will need to relearn it. 

Some spells require a direction in which to cast them, similar to
wands.  To cast one at yourself, just give a `.' or `s' for the
direction. A few spells require you to pick a target location rather
than just specify a particular direction. Other spells don't require
any direction or target. 

Just as weapons are divided into groups in which a character can
become proficient (to varying degrees), spells are similarly
grouped. Successfully casting a spell exercises its skill group;
using the "#enhance" command to advance a sufficiently exercised
skill will affect all spells within the group.  Advanced skill may
increase the potency of spells, reduce their risk of failure during
casting attempts, and improve the accuracy of the estimate for how
much longer they will be retained in your memory. Skill slots are
shared with weapons skills. (See also the section on "Weapon
proficiency".) 

Casting a spell also requires flexible movement, and wearing various
types of armor may interfere with that. 

The command to read a spellbook is the same as for scrolls, `r'
(read). The `+' command lists each spell you know along with its
level, skill category, chance of failure when casting, and an
estimate of how strongly it is remembered. The `Z' (cast) command
casts a spell.

@node Tools (`(')
@section Tools (`(')

Tools are miscellaneous objects with various purposes. Some tools
have a limited number of uses, akin to wand charges. For example,
lamps burn out after a while. Other tools are containers, which
objects can be placed into or taken out of. 

The command to use a tool is `a' (apply).

@menu
* Containers::
@end menu

@node Containers
@subsection Containers

You may encounter bags, boxes, and chests in your travels. A tool of
this sort can be opened with the "#loot" extended command when you
are standing on top of it (that is, on the same floor spot), or with
the `a' (apply) command when you are carrying it.  However, chests
are often locked, and are in any case unwieldy objects. You must set
one down before unlocking it by using a key or lock-picking tool with
the `a' (apply) command, by kicking it with the `@math{^D}' command, or by
using a weapon to force the lock with the "#force" extended command. 

Some chests are trapped, causing nasty things to happen when you
unlock or open them. You can check for and try to deactivate traps
with the "#untrap" extended command.

@node Amulets (`"')
@section Amulets (`"')

Amulets are very similar to rings, and often more powerful.

Like rings, amulets have various magical properties, some beneficial,
some harmful, which are activated by putting them on. 

Only one amulet may be worn at a time, around your neck.

The commands to use amulets are the same as for rings, `P' (put on)
and `R' (remove).

@node Gems (`*')
@section Gems (`*')

Some gems are valuable, and can be sold for a lot of gold. They are
also a far more efficient way of carrying your riches. Valuable gems
increase your score if you bring them with you when you exit. 

Other small rocks are also categorized as gems, but they are much
less valuable. All rocks, however, can be used as projectile weapons
(if you have a sling). In the most desperate of cases, you can still
throw them by hand.

@node Large rocks (``')
@section Large rocks (``')

Statues and boulders are not particularly useful, and are generally
heavy.  It is rumored that some statues are not what they seem. 

Very large humanoids (giants and their ilk) have been known to use
boulders as weapons. 

For some configurations of the program, statues are no longer shown
as ``' but by the letter representing the monster they depict
instead.

@node Gold (`$')
@section Gold (`$')

Gold adds to your score, and you can buy things in shops with
it. There are a number of monsters in the dungeon that may be
influenced by the amount of gold you are carrying (shopkeepers
aside).

@node Persistence of Objects
@section Persistence of Objects

Normally, if you have seen an object at a particular map location and
move to another location where you can't directly see that object any
more, if will continue to be displayed on your map.  That remains the
case even if it is not actually there any more -- perhaps a monster
has picked it up or it has rotted away -- until you can see or feel
that location again. One notable exception is that if the object gets
covered by the "remembered, unseen monster" marker. When that marker
is later removed after you've verified that no monster is there, you
will forget that there was any object there regardless of whether the
unseen monster actually took the object. If the object is still
there, then once you see or feel that location again you will
re-discover the object and resume remembering it.   

The situation is the same for a pile of objects, except that only the
top item of the pile is displayed. The hilite@math{_pile} option can be
enabled in order to show an item differently when it is the top one
of a pile.

@node Conduct
@chapter Conduct

As if winning NetHack were not difficult enough, certain players seek
to challenge themselves by imposing restrictions on the way they play
the game. The game automatically tracks some of these challenges,
which can be checked at any time with the #conduct command or at the
end of the game. When you perform an action which breaks a challenge,
it will no longer be listed. This gives players extra "bragging
rights" for winning the game with these challenges. Note that it is
perfectly acceptable to win the game without resorting to these
restrictions and that it is unusual for players to adhere to
challenges the first time they win the game. 

Several of the challenges are related to eating behavior. The most
difficult of these is the foodless challenge.  Although creatures can
survive long periods of time without food, there is a physiological
need for water; thus there is no restriction on drinking beverages,
even if they provide some minor food benefits. Calling upon your god
for help with starvation does not violate any food challenges
either. 

A strict vegan diet is one which avoids any food derived from
animals. The primary source of nutrition is fruits and
vegetables. The corpses and tins of blobs (`b'), jellies (`j'), and
fungi (`F') are also considered to be vegetable matter.  Certain
human food is prepared without animal products; namely, lembas
wafers, cram rations, food rations (gunyoki), K-rations, and
C-rations.  Metal or another normally indigestible material eaten
while polymorphed into a creature that can digest it is also
considered vegan food.  Note however that eating such items still
counts against foodless conduct. 

Vegetarians do not eat animals; however, they are less selective
about eating animal byproducts than vegans. In addition to the vegan
items listed above, they may eat any kind of pudding (`P') other than
the black puddings, eggs and food made from eggs (fortune cookies and
pancakes), food made with milk (cream pies and candy bars), and lumps
of royal jelly. Monks are expected to observe a vegetarian diet. 

Eating any kind of meat violates the vegetarian, vegan, and foodless
conducts.  This includes tripe rations, the corpses or tins of any
monsters not mentioned above, and the various other chunks of meat
found in the dungeon. Swallowing and digesting a monster while
polymorphed is treated as if you ate the creature's corpse.  Eating
leather, dragon hide, or bone items while polymorphed into a creature
that can digest it, or eating monster brains while polymorphed into a
mind flayer, is considered eating an animal, although wax is only an
animal byproduct. 

Regardless of conduct, there will be some items which are
indigestible, and others which are hazardous to eat. Using a
swallow-and-digest attack against a monster is equivalent to eating
the monster's corpse. Please note that the term "vegan" is used here
only in the context of diet. You are still free to choose not to use
or wear items derived from animals (e.g. leather, dragon hide, bone,
horns, coral), but the game will not keep track of this for you. Also
note that "milky" potions may be a translucent white, but they do not
contain milk, so they are compatible with a vegan diet.  Slime molds
or player-defined "fruits", although they could be anything from
"cherries" to "pork chops", are also assumed to be vegan. 

An atheist is one who rejects religion. This means that you cannot
#pray, #offer sacrifices to any god, #turn undead, or #chat with a
priest. Particularly selective readers may argue that playing Monk or
Priest characters should violate this conduct; that is a choice left
to the player. Offering the Amulet of Yendor to your god is necessary
to win the game and is not counted against this conduct. You are also
not penalized for being spoken to by an angry god, priest(ess), or
other religious figure; a true atheist would hear the words but
attach no special meaning to them. 

Most players fight with a wielded weapon (or tool intended to be
wielded as a weapon). Another challenge is to win the game without
using such a wielded weapon. You are still permitted to throw, fire,
and kick weapons; use a wand, spell, or other type of item; or fight
with your hands and feet. 

In NetHack, a pacifist refuses to cause the death of any other
monster (i.e. if you would get experience for the death). This is a
particularly difficult challenge, although it is still possible to
gain experience by other means. 

An illiterate character cannot read or write. This includes reading a
scroll, spellbook, fortune cookie message, or t-shirt; writing a
scroll; or making an engraving of anything other than a single "X"
(the traditional signature of an illiterate person). Reading an
engraving, or any item that is absolutely necessary to win the game,
is not counted against this conduct. The identity of scrolls and
spellbooks (and knowledge of spells) in your starting inventory is
assumed to be learned from your teachers prior to the start of the
game and isn't counted. 

There are several other challenges tracked by the game. It is
possible to eliminate one or more species of monsters by genocide;
playing without this feature is considered a challenge. When the game
offers you an opportunity to genocide monsters, you may respond with
the monster type "none" if you want to decline. You can change the
form of an item into another item of the same type ("polypiling") or
the form of your own body into another creature ("polyself") by wand,
spell, or potion of polymorph; avoiding these effects are each
considered challenges. Polymorphing monsters, including pets, does
not break either of these challenges.  Finally, you may sometimes
receive wishes; a game without an attempt to wish for any items is a
challenge, as is a game without wishing for an artifact (even if the
artifact immediately disappears). When the game offers you an
opportunity to make a wish for an item, you may choose "nothing" if
you want to decline.

@node Options
@chapter Options

Due to variations in personal tastes and conceptions of how NetHack
should do things, there are options you can set to change how NetHack
behaves.  

@menu
* Setting the options::
* Using a configuration file::
* Using the NETHACKOPTIONS environment variable::
* 9.4. Customization options: 94 Customization options. 
* Window Port Customization options::
* Platform-specific Customization options::
* Regular Expressions::
* Configuring Autopickup Exceptions::
* Changing Key Bindings::
* Configuring Message Types::
* Configuring Menu Colors::
* Configuring User Sounds::
* Configuring Status Hilites::
* Modifying NetHack Symbols::
* Configuring NetHack for Play by the Blind::
* Global Configuration for System Administrators::
@end menu

@node Setting the options
@section Setting the options

Options may be set in a number of ways.  Within the game, the `O'
command allows you to view all options and change most of them. You
can also set options automatically by placing them in a configuration
file, or in the NETHACKOPTIONS environment variable. Some versions of
NetHack also have front-end programs that allow you to set options
before starting the game or a global configuration for system
administrators.

@node Using a configuration file
@section Using a configuration file

The default name of the configuration file varies on different
operating systems.  

On UNIX, Linux, and Mac OS X it is ".nethackrc" in the user's home
directory. The file may not exist, but it is a normal ASCII text file
and can be created with any text editor.  

On Windows, it is ".nethackrc" in the folder
"\%USERPROFILE%\3.6". The file may not exist, but it is a
normal ASCII text file can can be created with any text editor. After
running NetHack for the first time, you should find a default
template for the configuration file named ".nethackrc.template" in
"\%USERPROFILE%\3.6". If you had not created the
configuration file, NetHack will create the configuration file for
you using the default template file.  

On MS-DOS, it is "defaults.nh" in the same folder as nethack.exe.

Any line in the configuration file starting with `#' is treated as a
comment. Empty lines are ignored. 

Any line beginning with `[' and ending in `]' is considered a section
marker.  The text between the square brackets is the section
name. Lines after a section marker belong to that section, and are
ignored unless a CHOOSE statement was used to select that
section. Section names are case insensitive. 

You can use different configuration statements in the file, some of
which can be used multiple times. In general, the statements are
written in capital letters, followed by an equals sign, followed by
settings particular to that statement. 

Here is a list of allowed statements:

@table @asis
@item OPTIONS
There are two types of options, boolean and compound
options. Boolean options toggle a setting on or off, while compound
options take more diverse values. Prefix a boolean option with "no"
or `!' to turn it off. For compound options, the option name and
value are separated by a colon. Some options are persistent, and
apply only to new games. You can specify multiple OPTIONS
statements, and multiple options separated by commas in a single
OPTIONS statement. (Comma separated options are processed from
right to left.) 
@end table

@example
Example:

   OPTIONS=dogname:Fido
   OPTIONS=!legacy,autopickup,pickup_types:$"=/!?+
@end example

@table @asis
@item HACKDIR
Default location of files NetHack needs. On Windows
HACKDIR defaults to the location of the NetHack.exe or NetHackw.exe
file so setting HACKDIR to override that is not usually necessary
or recommended.  

@item LEVELDIR
The location that in-progress level files are
stored. Defaults to HACKDIR, must be writable. 

@item SAVEDIR
The location where saved games are kept. Defaults to
HACKDIR, must be writable. 

@item BONESDIR
The location that bones files are kept. Defaults to
HACKDIR, must be writable. 

@item LOCKDIR
The location that file synchronization locks are
stored. Defaults to HACKDIR, must be writable. 

@item TROUBLEDIR
The location that a record of game aborts and
self-diagnosed game problems is kept. Defaults to HACKDIR, must be
writable. 

@item AUTOCOMPLETE
Enable or disable an extended command
autocompletion. Autocompletion has no effect for the X11
windowport. You can specify multiple autocompletions.  To enable
autocompletion, list the extended command. Prefix the command with
"!" to disable the autocompletion for that command. 
@end table

@example
Example:

   AUTOCOMPLETE=zap,!annotate
@end example

@table @asis
@item AUTOPICKUP@math{_EXCEPTION}
Set exceptions to the pickup@math{_types}
option. See the "Configuring Autopickup Exceptions" section.    

@item BINDINGS
Change the key bindings of some special keys, menu
accelerators, or extended commands. You can specify multiple
bindings. Format is key followed by the command, separated by a
colon. See the "Changing Key Bindings" section for more
information.  
@end table

@example
Example:

   BIND=^X:getpos.autodescribe
@end example

@table @asis
@item CHOOSE
Chooses at random one of the comma-separated parameters
as an active section name. Lines in other sections are ignored.  
@end table

@example
Example:

   OPTIONS=color
   CHOOSE=char A,char B
   [char A]
   OPTIONS=role:arc,race:dwa,align:law,gender:fem
   [char B]
   OPTIONS=role:wiz,race:elf,align:cha,gender:mal
@end example

@table @asis
@item MENUCOLOR
Highlight menu lines with different colors. See the
"Configuring Menu Colors" section. 

@item MSGTYPE
Change the way messages are shown in the top status
line. See the "Configuring Message Types" section. 

@item ROGUESYMBOLS
Custom symbols for for the rogue level's symbol
set. See SYMBOLS below. 

@item SOUND
Define a sound mapping. See the "Configuring User Sounds"
section. 

@item SOUNDDIR
Define the directory that contains the sound files.
See the "Configuring User Sounds" section. 

@item SYMBOLS
Override one or more symbols in the symbol set used for
all dungeon levels except for the special rogue level.  See the
"Modifying NetHack Symbols" section. 
@end table

@example
 Example:

    # replace small punctuation (tick marks) with digits
    SYMBOLS=S_boulder:0,S_golem:7

WIZKIT
 Debug mode only:  extra items to add to initial inventory.
 Value is the name of a text file containing a list of item
 names, one per line, up to a maximum of 128 lines. Each line
 is processed by the function that handles wishing.

 Example:

    WIZKIT=~/wizkit.txt

@end example

Here is an example of configuration file contents:

@example
# Set your character's role, race, gender, and alignment.
OPTIONS=role:Valkyrie, race:Human, gender:female, align:lawful
#
# Turn on autopickup, set automatically picked up object types
OPTIONS=autopickup,pickup_types:$"=/!?+
#
# Map customization
OPTIONS=color      # Display things in color if possible
OPTIONS=lit_corridor  # Show lit corridors differently
OPTIONS=hilite_pet,hilite_pile
# Replace small punctuation (tick marks) with digits
SYMBOLS=S_boulder:0,S_golem:7
#
# No startup splash screen. Windows GUI only.
OPTIONS=!splash_screen
@end example

@node Using the NETHACKOPTIONS environment variable
@section Using the NETHACKOPTIONS environment variable

The NETHACKOPTIONS variable is a comma-separated list of initial
values for the various options. Some can only be turned on or
off. You turn one of these on by adding the name of the option to the
list, and turn it off by typing a `!' or "no" before the name. Others
take a character string as a value.  You can set string options by
typing the option name, a colon or equals sign, and then the value of
the string. The value is terminated by the next comma or the end of
string. 

For example, to set up an environment variable so that color is on,
legacy is off, character name is set to "Blue Meanie", and named
fruit is set to "lime", you would enter the command 

@example
% setenv NETHACKOPTIONS "color,\!leg,name:Blue Meanie,fruit:lime"
@end example

in csh (note the need to escape the `!' since it's special to that
shell), or the pair of commands 

@example
$ NETHACKOPTIONS="color,!leg,name:Blue Meanie,fruit:lime"
$ export NETHACKOPTIONS
@end example

in sh, ksh, or bash.

The NETHACKOPTIONS value is effectively the same as a single OPTIONS
statement in a configuration file. The "OPTIONS=" prefix is implied
and comma separated options are processed from right to left. Other
types of configuration statements such as BIND or MSGTYPE are not
allowed. 

Instead of a comma-separated list of options, NETHACKOPTIONS can be
set to the full name of a configuration file you want to use. If that
full name doesn't start with a slash, precede it with `@@' (at-sign)
to let NetHack know that the rest is intended as a file name. If it
does start with `/', the at-sign is optional.

@node 94 Customization options
@section 9.4. Customization options

Here are explanations of what the various options do. Character
strings that are too long may be truncated.  Some of the options
listed may be inactive in your dungeon. 

Some options are persistent, and are saved and reloaded along with
the game. Changing a persistent option in the configuration file
applies only to new games. 

@table @asis
@item acoustics
Enable messages about what your character hears
(default on). Note that this has nothing to do with your computer's
audio capabilities. Persistent. 

@item align
Your  starting  alignment (align:lawful, align:neutral, or
align:chaotic). You may specify just the first letter.  The default
is to randomly pick an appropriate alignment. If you prefix the
value with `!' or "no", you will exclude that alignment from being
picked randomly. Cannot be set with the `O' command. Persistent. 

@item autodescribe
Automatically describe the terrain under cursor
when asked to get a location on the map (default true). The
whatis@math{_coord} option controls whether the description includes map
coordinates. 

@item autodig
Automatically dig if you are wielding a digging tool and
moving into a place that can be dug (default false). Persistent. 

@item autoopen
Walking into a door attempts to open it (default
true). Persistent. 

@item autopickup
Automatically pick up things onto which you move
(default on). Persistent. See pickup@math{_types} to refine the behavior. 

@item autoquiver
This option controls what happens when you attempt
the `f' (fire) command when nothing is quivered or readied (default
false).  When true, the computer will fill your quiver or quiver
sack or make ready some suitable weapon. Note that it will not take
into account the blessed/cursed status, enchantment, damage, or
quality of the weapon; you are free to manually fill your quiver or
quiver sack or make ready with the `Q' command instead. If no
weapon is found or the option is false, the `t' (throw) command is
executed instead. Persistent. 

@item blind
Start the character permanently blind (default
false). Persistent. 

@item bones
Allow saving and loading bones files (default true).
Persistent. 

@item boulder
Set the character used to display boulders (default is
the "large rock" class symbol, ``'). 

@item catname
Name your starting cat (for example "catname:Morris").
Cannot be set with the `O' command. 

@item character
Synonym for "role" to pick the type of your character
(for example "character:Monk"). See role for more details. 

@item checkpoint
Save game state after each level change, for possible
recovery after program crash (default on). Persistent.

@item checkspace
Check free disk space before writing files to disk
(default on). You may have to turn this off if you have more than 2
GB free space on the partition used for your save and level files
(because too much space might overflow the calculation and end up
looking like insufficient space). Only applies when MFLOPPY was
defined during compilation. 

@item clicklook
Allows looking at things on the screen by navigating
the mouse over them and clicking the right mouse button (default
off). 

@item cmdassist
Have the game provide some additional command
assistance for new players if it detects some anticipated mistakes
(default on). 

@item confirm
Have user confirm attacks on pets, shopkeepers, and
other peaceable creatures (default on). Persistent.

@item dark@math{_room}
Show out-of-sight areas of lit rooms (default
on). Persistent. 

@item disclose
Controls what information the program reveals when the
game ends.  Value is a space separated list of prompting/category
pairs (default is "ni na nv ng nc no", prompt with default response
of `n' for each candidate). Persistent. The possibilities are: 

@itemize
@item
i - disclose your inventory;
@item
a - disclose your attributes;
@item
v - summarize monsters that have been vanquished;
@item
g - list monster species that have been genocided;
@item
c - display your conduct;
@item
o - display dungeon overview.
@end itemize
@end table

Each disclosure possibility can optionally be preceded by a prefix
which lets you refine how it behaves. Here are the valid prefixes: 

@itemize
@item
y -  prompt you and default to yes on the prompt;
@item
n - prompt you and default to no on the prompt;
@item
+ - disclose it without prompting;
@item
- - do not disclose it and do not prompt.
@end itemize

The listing of vanquished monsters can be sorted, so there are two
additional choices for `v': 

@itemize
@item
? - prompt you and default to ask on the prompt;
@item
# - disclose it without prompting, ask for sort order.
@end itemize

Asking refers to picking one of the orderings from a menu. The `+'
disclose without prompting choice, or being prompted and answering
`y' rather than `a', will default to showing monsters in the
traditional order, from high level to low level. 

Omitted categories are implicitly added with `n' prefix. Specified
categories with omitted prefix implicitly use `+' prefix. Order of
the disclosure categories does not matter, program display for
end-of-game disclosure follows a set sequence. 

(for example "disclose:yi na +v -g o") The example sets inventory to
prompt and default to yes, attributes to prompt and default to no,
vanquished to disclose without prompting, genocided to not disclose
and not prompt, conduct to implicitly prompt and default to no, and
overview to disclose without prompting. 

Note that the vanquished monsters list includes all monsters killed
by traps and each other as well as by you. And the dungeon overview
shows all levels you had visited but does not reveal things about
them that you hadn't discovered. 

@table @asis
@item dogname
Name your starting dog (for example
"dogname:Fang"). Cannot be set with the `O' command. 

@item extmenu
Changes the extended commands interface to pop-up a menu
of available commands. It is keystroke compatible with the
traditional interface except that it does not require that you hit
Enter. It is implemented for the tty interface (default off). 
@end table

For the X11 interface, which always uses a menu for choosing an
extended command, it controls whether the menu shows all available
commands (on) or just the subset of commands which have traditionally
been considered extended ones (off). 

@table @asis
@item female
An obsolete synonym for "gender:female". Cannot be set
with the `O' command. 

@item fixinv
An object's inventory letter sticks to it when it's
dropped (default on).  If this is off, dropping an object shifts
all the remaining inventory letters. Persistent. 

@item force@math{_invmenu}
Commands asking for an inventory item show a menu
instead of a text query with possible menu letters. Default is
off. 

@item fruit
Name a fruit after something you enjoy eating (for example
"fruit:mango") (default "slime mold"). Basically a nostalgic whimsy
that NetHack uses from time to time. You should set this to
something you find more appetizing than slime mold. Apples,
oranges, pears, bananas, and melons already exist in NetHack, so
don't use those. 

@item gender
Your starting gender (gender:male or gender:female).  You
may specify just the first letter. Although you can still denote
your gender using the "male" and "female" options, the "gender"
option will take precedence. The default is to randomly pick an
appropriate gender. If you prefix the value with `!' or "no", you
will exclude that gender from being picked randomly. Cannot be set
with the `O' command. Persistent. 

@item goldX
When filtering objects based on bless/curse state (BUCX),
whether to treat gold pieces as X (unknown bless/curse state, when
"on") or U (known to be uncursed, when "off", the default).  Gold
is never blessed or cursed, but it is not described as "uncursed"
even when the implicit@math{_uncursed} option is "off". 

@item help
If more information is available for an object looked at
with the `/' command, ask if you want to see it (default
on). Turning help off makes just looking at things faster, since
you aren't interrupted with the "More info?" prompt, but it also
means that you might miss some interesting and/or important
information. Persistent. 

@item herecmd@math{_menu}
When using a windowport that supports mouse and
clicking on yourself or next to you, show a menu of possible
actions for the location. Same as "#herecmdmenu" and
"#therecmdmenu" commands. 

@item hilite@math{_pet}
Visually distinguish pets from similar animals
(default off). The behavior of this option depends on the type of
windowing you use. In text windowing, text highlighting or inverse
video is often used; with tiles, generally displays a heart symbol
near pets. 

With the curses interface, the petattr option controls
how to highlight pets and setting it will turn the hilite@math{_pet}
option on or off as warranted.  

@item hilite@math{_pile}
Visually distinguish piles of objects from
individual objects (default off). The behavior of this option
depends on the type of windowing you use. In text windowing, text
highlighting or inverse video is often used; with tiles, generally
displays a small plus-symbol beside the object on the top of the
pile. 

@item hitpointbar
Show a hit point bar graph behind your name and
title. Only available for TTY and Windows GUI, and only when
statushilites is on. 

@item horsename
Name your starting horse (for example
"horsename:Trigger"). Cannot be set with the `O' command.

@item ignintr
Ignore interrupt signals, including breaks (default
off). Persistent. 

@item implicit@math{_uncursed}
Omit "uncursed" from inventory lists, if
possible (default on). 

@item legacy
Display an introductory message when starting the game
(default on). Persistent.

@item lit@math{_corridor}
Show corridor squares seen by night vision or a
light source held by your character as lit (default
off). Persistent. 

@item lootabc
When using a menu to interact with a container, use the
old `a', `b', and `c' keyboard shortcuts rather than the mnemonics
`o', `i', and `b' (default off). Persistent. 

@item mail
Enable mail delivery during the game (default
on). Persistent. 

@item male
An obsolete synonym for "gender:male". Cannot be set with
the `O' command. 

@item mention@math{_walls}
Give feedback when walking against a wall (default
off). 

@item menucolors
Enable coloring menu lines (default off).  See
"Configuring Menu Colors" on how to configure the colors. 

@item menustyle
Controls the interface used when you need to choose
various objects (in response to the Drop command, for instance).
The value specified should be the first letter of one of the
following: traditional, combination, full, or partial.  Traditional
was the only interface available for early versions; it consists of
a prompt for object class characters, followed by an
object-by-object prompt for all items matching the selected object
class(es). Combination starts with a prompt for object class(es) of
interest, but then displays a menu of matching objects rather than
prompting one-by-one. Full displays a menu of object classes rather
than a character prompt, and then a menu of matching objects for
selection. Partial skips the object class filtering and immediately
displays a menu of all objects. Persistent. 

@item menu@math{_deselect}@math{_all}
Menu character accelerator to deselect all
items in a menu. Implemented by the Amiga, Gem, X11 and tty
ports. Default `-'. 

@item menu@math{_deselect}@math{_page}
Menu character accelerator to deselect all
items on this page of a menu. Implemented by the Amiga, Gem and tty
ports.  Default `\'.  

@item menu@math{_first}@math{_page}
Menu character accelerator to jump to the first
page in a menu. Implemented by the Amiga, Gem and tty
ports. Default `^'. 

@item menu@math{_headings}
Controls how the headings in a menu are
highlighted.  Values are "none", "bold", "dim", "underline",
"blink", or "inverse". Not all ports can actually display all
types. 

@item menu@math{_invert}@math{_all}
Menu character accelerator to invert all items
in a menu.  Implemented by the Amiga, Gem, X11 and tty
ports. Default `@@'. 

@item menu@math{_invert}@math{_page}
Menu character accelerator to invert all items
on this page of a menu. Implemented by the Amiga, Gem and tty
ports.  Default `~'. 

@item menu@math{_last}@math{_page}
Menu character accelerator to jump to the last
page in a menu. Implemented by the Amiga, Gem and tty
ports. Default `|'. 

@item menu@math{_next}@math{_page}
Menu character accelerator to goto the next menu
page.  Implemented by the Amiga, Gem and tty ports. Default `>'. 

@item menu@math{_objsyms}
Show object symbols in menu headings in menus where
the object symbols act as menu accelerators (default off).

@item menu@math{_overlay}
Do not clear the screen before drawing menus, and
align menus to the right edge of the screen. Only for the tty
port. (default on) 

@item menu@math{_previous}@math{_page}
Menu character accelerator to goto the
previous menu page. Implemented by the Amiga, Gem and tty
ports. Default `<'. 

@item menu@math{_search}
Menu character accelerator to search for a menu
item. Implemented by the Amiga, Gem, X11 and tty ports. Default
`:'. 

@item menu@math{_select}@math{_all}
Menu character accelerator to select all items
in a menu.  Implemented by the Amiga, Gem, X11 and tty
ports. Default `.'. 

@item menu@math{_select}@math{_page}
Menu character accelerator to select all items
on this page of a menu. Implemented by the Amiga, Gem and tty
ports.  Default `,'. 

@item monpolycontrol
Prompt for new form whenever any monster changes
shape (default off). Debug mode only.

@item mouse@math{_support}
Allow use of the mouse for input and travel.
Valid settings are: 

@itemize
@item
0 - disabled
@item
1 - enabled and make OS adjustments to support mouse use
@item
2 - like 1 but does not make any OS adjustments
@end itemize

Omitting a value is the same as specifying 1 and negating
mouse@math{_support} is the same as specifying 0.  

@item msghistory
The number of top line messages to keep (and be able
to recall with `@math{^P}') (default 20). Cannot be set with the `O'
command. 

@item msg@math{_window}
Allows you to change the way recalled messages are
displayed. Currently it is only supported for tty (all four
choices) and for curses (`f' and `r' choices, default `r'). The
possible values are: 

@itemize
@item
s - single message (default; only choice prior to 3.4.0);
@item
c - combination, two messages as "single", then as "full";
@item
f - full window, oldest message first;
@item
r - full window reversed, newest message first.
@end itemize

For backward compatibility, no value needs to be specified (which
defaults to "full"), or it can be negated (which defaults to
"single"). 

@item name
Set your character's name (defaults to your user name).
You can also set your character's role by appending a dash and one
or more letters of the role (that is, by suffixing one of -A -B -C
-H -K -M -P -Ra -Ro -S -T -V -W). If -@@ is used for the role, then
a random one will be automatically chosen.  Cannot be set with the
`O' command. 

@item news
Read the NetHack news file, if present (default on). Since
the news is shown at the beginning of the game, there's no point in
setting this with the `O' command. 

@item nudist
Start the character with no armor (default
false). Persistent. 

@item null
Send padding nulls to the terminal (default
on). Persistent. 

@item number@math{_pad}
Use digit keys instead of letters to move (default 0
or off). Valid settings are: 

@itemize
@item
0 - move by letters; "yuhjklbn"
@item
1 - move by numbers; digit `5' acts as `G' movement prefix
@item
2 - like 1 but `5' works as `g' prefix instead of as `G'
@item
3 - by numbers using phone key layout; 123 above, 789 below
@item
4 - combines 3 with 2; phone layout plus MS-DOS compatibility
@item
-1 - by letters but use `z' to go northwest, `y' to zap wands
@end itemize

For backward compatibility, omitting a value is the same as
specifying 1 and negating number@math{_pad} is the same as
specifying 0. (Settings 2 and 4 are for compatibility with MS-DOS
or old PC Hack; in addition to the different behavior for `5',
`Alt-5' acts as `G' and `Alt-0' acts as `I'. Setting -1 is to
accommodate some QWERTZ keyboards which have the location of the
`y' and `z' keys swapped.) When moving by numbers, to enter a count
prefix for those commands which accept one (such as "12s" to search
twelve times), precede it with the letter `n' ("n12s"). 

@item packorder
Specify  the  order  to  list  object types in
(default "")[%?+!=/(*`0_"). The value of this option should be a
string containing the symbols for the various object types. Any
omitted types are filled in at the end from the previous order. 

@item paranoid@math{_confirmation}
A space separated list of specific
situations where alternate prompting  is desired.  The default is
paranoid@math{_confirmation}:pray. 

@itemize
@item
Confirm: for any prompts which are set to require "yes" rather
than `y', also require "no" to reject instead of accepting any
non-yes response as no; 

@item
quit: require "yes" rather than `y' to confirm quitting the game
or switching into non-scoring explore mode;  

@item
die: require "yes" rather than `y' to confirm dying (not useful
in normal play; applies to explore mode);  

@item
bones: require "yes" rather than `y' to confirm saving bones data
when dying in debug mode;  

@item
attack: require "yes" rather than `y' to confirm attacking a
peaceful monster;  

@item
wand-break: require "yes" rather than `y' to confirm breaking a
wand; 

@item
eating: require "yes" rather than `y' to confirm whether to
continue eating; 

@item
Were-change: require "yes" rather than `y' to confirm changing
form due to lycanthropy when hero has polymorph control; 

@item
pray: require `y' to confirm an attempt to pray rather than
immediately praying; on by default; 

@item
Remove: require selection from inventory for `R' and `T' commands
even when wearing just one applicable item. 

@item
all: turn on all of the above.
@end itemize
@end table

By default, the pray choice is enabled, the others disabled. To
disable it without setting any of the other choices, use
"paranoid@math{_confirmation}:none". To keep it enabled while setting any of
the others, include it in the list, such as
"paranoid@math{_confirmation}:attack pray Remove". 

@table @asis
@item perm@math{_invent}
If true, always display your current inventory in a
window. This only makes sense for windowing system interfaces that
implement this feature. 

@item petattr
Specifies one or more text highlighting attributes to
use when showing pets on the map.  Effectively a superset of the
hilite@math{_pet} boolean option. Curses interface only; value is one or
more of the following letters. 

@itemize
@item
n - Normal text (no highlighting)
@item
i - Inverse video (default)
@item
b - Bold text
@item
u - Underlined text
@item
k - blinKing text
@item
d - Dim text
@item
t - iTalic text
@item
l - Left line indicator
@item
r - Right line indicator
@end itemize
@end table

Some of those choices might not work, particularly the final three,
depending upon terminal hardware or terminal emulation software. 

Currently multiple highlight-style letters can be combined by simply
stringing them together (for example, "bk"), but in the future they
might require being separated by plus signs (such as "b+k", which
works already). When using the `n' choice, it should be specified on
its own, not in combination with any of the other letters. 

@table @asis
@item pettype
Specify the type of your initial pet, if you are playing
a character class that uses multiple types of pets; or choose to
have no initial pet at all. Possible values are "cat", "dog",
"horse", and "none". If the choice is not allowed for the role you
are currently playing, it will be silently ignored. For example,
"horse" will only be honored when playing a knight. Cannot be set
with the `O' command. 

@item pickup@math{_burden}
When you pick up an item that would exceed this
encumbrance level (Unencumbered, Burdened, streSsed, straiNed,
overTaxed, or overLoaded), you will be asked if you want to
continue. (Default `S'). Persistent. 

@item pickup@math{_thrown}
If this option is on and autopickup is also on,
try to pick up things that you threw, even if they aren't in
pickup@math{_types} or match an autopickup exception. Default is
on. Persistent. 

@item pickup@math{_types}
Specify the object types to be picked up when
autopickup is on. Default is all types. You can use
autopickup@math{_exception} configuration file lines to further refine
autopickup behavior. Persistent.

@item pile@math{_limit}
When walking across a pile of objects on the floor,
threshold at which the message "there are few/several/many objects
here" is given instead of showing a popup list of those objects. A
value of 0 means "no limit" (always list the objects); a value of 1
effectively means "never show the objects" since the pile size will
always be at least that big; default value is 5. Persistent. 

@item playmode
Values are "normal", "explore", or "debug". Allows
selection of explore mode (also known as discovery mode) or debug
mode (also known as wizard mode) instead of normal play. Debug mode
might only be allowed for someone logged in under a particular user
name (on multi-user systems) or specifying a particular character
name (on single-user systems) or it might be disabled entirely.
Requesting it when not allowed or not possible results in explore
mode instead. Default is normal play. 

@item pushweapon
Using the `w' (wield) command when already wielding
something pushes the old item into your alternate weapon slot
(default off). Likewise for the `a' (apply) command if it causes
the applied item to become wielded. Persistent. 

@item race
Selects your race (for example, "race:human"). Default is
random. If you prefix the value with `!' or "no", you will exclude
that race from being picked randomly. Cannot be set with the `O'
command. Persistent. 

@item rest@math{_on}@math{_space}
Make the space bar a synonym for the `.' (#wait)
command (default off). Persistent. 

@item role
Pick your type of character (for example "role:Samurai");
synonym for "character". See "name" for an alternate method of
specifying your role.  Normally only the first letter of the value
is examined; `r' is an exception with "Rogue", "Ranger", and
"random" values. If you prefix the value with `!' or "no", you will
exclude that role from being picked randomly.  Cannot be set with
the `O' command. Persistent. 

@item roguesymset
This option may be used to select one of the named
symbol sets found within "symbols" to alter the symbols displayed
on the screen on the rogue level. 

@item rlecomp
When writing out a save file, perform run length
compression of the map. Not all ports support run length
compression. It has no effect on reading an existing save file. 

@item runmode
Controls the amount of screen updating for the map
window when engaged in multi-turn movement (running via
shift+direction or control+direction and so forth, or via the
travel command or mouse click). The possible values are: 

@itemize
@item
teleport - update the map after movement has finished;
@item
run   - update the map after every seven or so steps;
@item
walk   - update the map after each step;
@item
crawl  - like walk, but pause briefly after each step.
@end itemize
@end table

This option only affects the game's screen display, not the actual
results of moving. The default is "run"; versions prior to 3.4.1 used
"teleport" only. Whether or not the effect is noticeable will depend
upon the window port used or on the type of terminal. Persistent. 

@table @asis
@item safe@math{_pet}
Prevent you from (knowingly) attacking your pets
(default on). Persistent.

@item sanity@math{_check}
Evaluate monsters, objects, and map prior to each
turn (default off). Debug mode only.

@item scores
Control what parts of the score list you are shown at the
end (for example "scores:5 top scores/4 around my score/own
scores"). Only the first letter of each category (`t', `a', or `o')
is necessary. Persistent. 

@item showexp
Show your accumulated experience points on bottom line
(default off). Persistent.

@item showrace
Display yourself as the glyph for your race, rather
than the glyph for your role (default off). Note that this setting
affects only the appearance of the display, not the way the game
treats you. Persistent. 

@item showscore
Show your approximate accumulated score on bottom line
(default off). Persistent. 

@item silent
Suppress terminal beeps (default on). Persistent.

@item sortloot
Controls the sorting behavior of the pickup lists for
inventory and #loot commands and some others. Persistent. The
possible values are: 

@itemize
@item
full - always sort the lists;
@item
loot - only sort the lists that don't use inventory letters, like 
with the #loot and pickup commands; 
@item
none - show lists the traditional way without sorting.
@end itemize

@item sortpack
Sort the pack contents by type when displaying
inventory (default on). Persistent.

@item sparkle
Display a sparkly effect when a monster (including
yourself) is hit by an attack to which it is resistant (default
on). Persistent. 

@item standout
Boldface monsters and "--More--" (default
off). Persistent. 

@item statushilites
Controls how many turns status hilite behaviors
highlight the field.  If negated or set to zero, disables status
hiliting. See "Configuring Status Hilites" for further
information. 

@item status@math{_updates}
Allow updates to the status lines at the bottom
of the screen (default true). 

@item suppress@math{_alert}
This option may be set to a NetHack version level
to suppress alert notification messages about feature changes for
that and prior versions (for example "suppress@math{_alert}:3.3.1"). 

@item symset
This option may be used to select one of the named symbol
sets found within "symbols" to alter the symbols displayed on the
screen.  Use "symset:default" to explicitly select the default
symbols. 

@item time
Show the elapsed game time in turns on bottom line (default
off). Persistent. 

@item timed@math{_delay}
When pausing momentarily for display effect, such as
with explosions and moving objects, use a timer rather than sending
extra characters to the screen. (Applies to "tty" interface only;
"X11" interface always uses a timer based delay.  The default is on
if configured into the program.) Persistent. 

@item tombstone
Draw a tombstone graphic upon your death (default
on). Persistent. 

@item toptenwin
Put the ending display in a NetHack window instead of
on stdout (default off). Setting this option makes the score list
visible when a windowing version of NetHack is started without a
parent window, but it no longer leaves the score list around after
game end on a terminal or emulating window. 

@item travel
Allow the travel command (default on). Turning this
option off will prevent the game from attempting unintended moves
if you make inadvertent mouse clicks on the map
window. Persistent. 

@item verbose
Provide more commentary during the game (default on).
Persistent. 

@item whatis@math{_coord}
When using the `/' or `;' commands to look around
on the map with autodescribe on, display coordinates after the
description.  Also works in other situations where you are asked to
pick a location. 

The possible settings are:

@itemize
@item
c - compass ("east" or "3s" or "2n,4w");
@item
f - full compass ("east" or "3south" or "2north,4west");
@item
m - map <x,y> (map column x=0 is not used);
@item
s - screen [row,column] (row is offset to match tty usage);
@item
n - none (no coordinates shown) [default].
@end itemize
@end table

The whatis@math{_coord} option is also used with the "@emph{m", "/M", "/o", and
"/O" sub-commands of `}', where the "none" setting is overridden with
"map". 

@table @asis
@item whatis@math{_filter}
When getting a location on the map, and using the
keys to cycle through next and previous targets, allows filtering
the possible targets. 

@itemize
@item
n - no filtering [default]
@item
v - in view only
@item
a - in same area only
@end itemize
@end table

The area-filter tries to be slightly predictive -- if you're standing
on a doorway, it will consider the area on the side of the door you
were last moving towards. 

Filtering can also be changed when getting a location with the
"getpos.filter" key. 

@table @asis
@item whatis@math{_menu}
When getting a location on the map, and using a key
to cycle through next and previous targets, use a menu instead to
pick a target. (default off) 

@item whatis@math{_moveskip}
When getting a location on the map, and using
shifted movement keys or meta-digit keys to fast-move, instead of
moving 8 units at a time, move by skipping the same
glyphs. (default off) 

@item windowtype
When the program has been built to support multiple
interfaces, select which one to use, such as "tty" or "X11"
(default depends on build-time settings; use "#version" to
check). Cannot be set with the `O' command. 
@end table

When used, it should be the first option set since its value might
enable or disable the availability of various other options. For
multiple lines in a configuration file, that would be the first
non-comment line. For a comma-separated list in NETHACKOPTIONS or an
OPTIONS line in a configuration file, that would be the rightmost
option in the list. 

@table @asis
@item wizweight
Augment object descriptions with their objects' weight
(default off). Debug mode only. 

@item zerocomp
When writing out a save file, perform zero-comp
compression of the contents. Not all ports support zero-comp
compression. It has no effect on reading an existing save file. 
@end table

@node Window Port Customization options
@section Window Port Customization options

Here are explanations of the various options that are used to
customize and change the characteristics of the windowtype that you
have chosen. Character strings that are too long may be truncated.
Not all window ports will adjust for all settings listed here. You
can safely add any of these options to your configuration file, and
if the window port is capable of adjusting to suit your preferences,
it will attempt to do so. If it can't it will silently ignore it. You
can find out if an option is supported by the window port that you
are currently using by checking to see if it shows up in the Options
list. Some options are dynamic and can be specified during the game
with the `O' command.

@table @asis
@item align@math{_message}
Where to align or place the message window (top,
bottom, left, or right)

@item align@math{_status}
Where to align or place the status window (top,
bottom, left, or right).

@item ascii@math{_map}
If NetHack can, it should display an ascii character
map if it can.

@item color
If NetHack can, it should display color if it can for
different monsters, objects, and dungeon features.

@item eight@math{_bit}@math{_tty}
If NetHack can, it should pass eight-bit character
values (for example, specified with the traps option) straight
through to your terminal (default off).

@item font@math{_map}
if NetHack can, it should use a font by the chosen name
for the map window.

@item font@math{_menu}
If NetHack can, it should use a font by the chosen
name for menu windows.

@item font@math{_message}
If NetHack can, it should use a font by the chosen
name for the message window.

@item font@math{_status}
If NetHack can, it should use a font by the chosen
name for the status window.

@item font@math{_text}
If NetHack can, it should use a font by the chosen
name for text windows.

@item font@math{_size}@math{_map}
If NetHack can, it should use this size font for
the map window.

@item font@math{_size}@math{_menu}
If NetHack can, it should use this size font for
menu windows.

@item font@math{_size}@math{_message}
If NetHack can, it should use this size font
for the message window.

@item font@math{_size}@math{_status}
If NetHack can, it should use this size font
for the status window.

@item font@math{_size}@math{_text}
If NetHack can, it should use this size font for
text windows.

@item fullscreen
If NetHack can, it should try and display on the
entire screen rather than in a window.

@item guicolor
Use color text and/or highlighting attributes when
displaying some non-map data (such as menu selector
letters). Curses interface only; default is on.

@item large@math{_font}
If NetHack can, it should use a large font.

@item map@math{_mode}
If NetHack can, it should display the map in the manner
specified.

@item player@math{_selection}
If NetHack can, it should pop up dialog boxes,
or use prompts for character selection.

@item popup@math{_dialog}
If NetHack can, it should pop up dialog boxes for
input.

@item preload@math{_tiles}
If NetHack can, it should preload tiles into
memory. For example, in the protected mode MS-DOS version, control
whether tiles get pre-loaded into RAM at the start of the game.
Doing so enhances performance of the tile graphics, but uses more
memory. (default on). Cannot be set with the `O' command.

@item scroll@math{_amount}
If NetHack can, it should scroll the display by
this number of cells when the hero reaches the scroll@math{_margin}.

@item scroll@math{_margin}
If NetHack can, it should scroll the display when
the hero or cursor is this number of cells away from the edge of
the window.

@item selectsaved
If NetHack can, it should display a menu of existing
saved games for the player to choose from at game startup, if it
can.  Not all ports support this option.

@item softkeyboard
Display an onscreen keyboard.  Handhelds are most
likely to support this option.

@item splash@math{_screen}
If NetHack can, it should display an opening
splash screen when it starts up (default yes).

@item statuslines
Number of lines for traditional below-the-map status
display.

Acceptable values are 2 and 3 (default is 2). Curses and tty
interfaces only.

@item term@math{_cols} and term@math{_rows}
Curses interface only. Number of columns
and rows to use for the display. Curses will attempt to resize to
the values specified but will settle for smaller sizes if they are
too big.  Default is the current window size.

@item tiled@math{_map}
If NetHack can, it should display a tiled map if it
can.

@item tile@math{_file}
Specify the name of an alternative tile file to
override the default.

@item tile@math{_height}
Specify the preferred height of each tile in a tile
capable port.

@item tile@math{_width}
Specify the preferred width of each tile in a tile
capable port

@item use@math{_darkgray}
Use bold black instead of blue for black glyphs
(TTY only).

@item use@math{_inverse}
If NetHack can, it should display inverse when the
game speci- fies it.

@item vary@math{_msgcount}
If NetHack can, it should display this number of
messages at a time in the message window.

@item windowborders
Whether to draw boxes around the map, status area,
message area, and persistent inventory window if enabled. Curses
in- terface only. Acceptable values are

@itemize
@item
0 - off, never show borders
@item
1 - on, always show borders
@item
2 - auto, on if display is at least (24+2)x(80+2) (default)
@end itemize
@end table

(The 26x82 size threshold for `2' refers to number of rows and
columns of the display.  A width of at least 110 columns (80+2+26+2)
is needed for align@math{_status} set to left or right.)

@table @asis
@item windowcolors
If NetHack can, it should display windows with the
specified foreground/background colors. Windows GUI only. The
format is
@end table

@example
OPTION=windowcolors:wintype foreground/background
@end example

where wintype is one of "menu", "message", "status", or "text", and
foreground and background are colors, either a hexadecimal
\'#rrggbb', one of the named colors (black, red, green, brown, blue,
magenta, cyan, orange, brightgreen, yellow, bright- blue,
brightmagenta, brightcyan, white, trueblack, gray, purple, silver,
maroon, fuchsia, lime, olive, navy, teal, aqua), or one of Windows UI
colors (activeborder, activecaption, appworkspace, background,
btnface, btnshadow, btntext, captiontext, graytext, greytext,
highlight, highlighttext, inactiveborder, inactivecaption, menu,
menutext, scrollbar, window, windowframe, windowtext).

@table @asis
@item wraptext
If NetHack can, it should wrap long lines of text if
they don't fit in the visible area of the window.
@end table

@node Platform-specific Customization options
@section Platform-specific Customization options

Here are explanations of options that are used by specific platforms
or ports to customize and change the port behavior.

@table @asis
@item altkeyhandler
Select an alternate keystroke handler dll to load
(Win32 tty NetHack only). The name of the handler is specified
without the .dll extension and without any path information. Cannot
be set with the `O' command.

@item altmeta
On Amiga, this option controls whether typing "Alt" plus
another key functions as a meta-shift for that key (default on).

@item altmeta
On other (non-Amiga) systems where this option is
available, it can be set to tell NetHack to convert a two character
sequence beginning with ESC into a meta-shifted version of the
second character (default off).
@end table

This conversion is only done for commands, not for other input
prompts. Note that typing one or more digits as a count prefix prior
to a command -- preceded by n if the number@math{_pad} option is set -- is
also subject to this conversion, so attempting to abort the count by
typing ESC will leave NetHack waiting for another character to
complete the two character sequence. Type a second ESC to finish
cancelling such a count.  At other prompts a single ESC suffices.

@table @asis
@item BIOS
Use BIOS calls to update the screen display quickly and to
read the keyboard (allowing the use of arrow keys to move) on
machines with an IBM PC compatible BIOS ROM (default off, OS/2, PC,
and ST NetHack only).

@item flush
(default off, Amiga NetHack only).

@item MACgraphics
(default on, Mac NetHack only).

@item page@math{_wait}
(default on, Mac NetHack only).

@item rawio
Force raw (non-cbreak) mode for faster output and more
bulletproof input (MS-DOS sometimes treats `@math{^P}' as a printer toggle
without it) (default off, OS/2, PC, and ST NetHack only). Note: DEC
Rainbows hang if this is turned on. Cannot be set with the `O'
command.

@item soundcard
(default on, PC NetHack only). Cannot be set with the
`O' command.

@item subkeyvalue
(Win32 tty NetHack only). May be used to alter the
value of keystrokes that the operating system returns to NetHack to
help compensate for international keyboard
issues. OPTIONS=subkeyvalue:171/92 will return 92 to NetHack, if
171 was originally going to be returned. You can use multiple
subkeyvalue statements in the configuration file if needed. Cannot
be set with the `O' command.

@item video
Set the video mode used (PC NetHack only). Values are
"autodetect", "default", or "vga".  Setting "vga" (or "autodetect"
with vga hardware present) will cause the game to display
tiles. Cannot be set with the `O' command.

@item videocolors
Set the color palette for PC systems using NO@math{_TERMS}
(default 4-2-6-1-5-3-15-12-10-14-9-13-11, (PC NetHack only). The
order of colors is red, green, brown, blue, magenta, cyan,
bright.white, bright.red, bright.green, yellow, bright.blue,
bright.magenta, and bright.cyan. Cannot be set with the `O'
command.

@item videoshades
Set the intensity level of the three gray scales
available (default dark normal light, PC NetHack only). If the game
display is difficult to read, try adjusting these scales; if this
does not correct the problem, try !color. Cannot be set with the
`O' command.
@end table

@node Regular Expressions
@section Regular Expressions

Regular expressions are normally POSIX extended regular
expressions. It is possible to compile NetHack without regular
expression support on a platform where there is no regular expression
library. While this is not true of any modern platform, if your
NetHack was built this way, patterns are instead glob patterns. This
applies to Autopickup exceptions, Message types, Menu colors, and
User sounds.

@node Configuring Autopickup Exceptions
@section Configuring Autopickup Exceptions

You can further refine the behavior of the autopickup option beyond
what is available through the pickup@math{_types} option.

By placing autopickup@math{_exception} lines in your configuration file, you
can define patterns to be checked when the game is about to
autopickup something.

@table @asis
@item autopickup@math{_exception}
Sets an exception to the pickup@math{_types}
option.  The autopickup@math{_exception} option should be followed by a
regular expression to be used as a pattern to match against the
singular form of the description of an object at your location.

In addition, some characters are treated specially if they occur as
the first character in the pattern, specifically:

@itemize
@item
< - always pickup an object that matches rest of pattern;
@item
> - never pickup an object that matches rest of pattern.
@end itemize

The autopickup@math{_exception} rules are processed in the order in which
they appear in your configuration file, thus allowing a later rule
to override an earlier rule.

Exceptions can be set with the `O' command, but because they are
not included in your configuration file, they won't be in effect if
you save and then restore your game.  autopickup@math{_exception} rules
and not saved with the game.

Here are some examples:
@end table

@example
autopickup_exception="<*arrow"
autopickup_exception=">*corpse"
autopickup_exception=">* cursed*"
@end example

The first example above will result in autopickup of any type of
arrow. The second example results in the exclusion of any corpse
from autopickup. The last example results in the exclusion of items
known to be cursed from autopickup.

@node Changing Key Bindings
@section Changing Key Bindings

It is possible to change the default key bindings of some special
commands, menu accelerator keys, and extended commands, by using BIND
stanzas in the configuration file. Format is key, followed by the
command to bind to, separated by a colon. The key can be a single
character ("x"), a control key ("@math{^X}", "C-x"), a meta key ("M-x"), or
a three-digit decimal ASCII code.

For example: 

@example
BIND=^X:getpos.autodescribe
BIND=@{:menu_first_page
BIND=v:loot
@end example

@table @asis
@item Extended command keys
You can bind multiple keys to the same
extended command. Unbind a key by using "nothing" as the extended
command to bind to.  You can also bind the "<esc>", "<enter>", and
"<space>" keys.

@item Menu accelerator keys
The menu control or accelerator keys can
also be rebound via OPTIONS lines in the configuration file. You
cannot bind object symbols into menu accelerators.

@item Special command keys
Below are the special commands you can
rebind.  Some of them can be bound to same keys with no problems,
others are in the same "context", and if bound to same keys, only
one of those commands will be available. Special command can only
be bound to a single key.

@item count
Prefix key to start a count, to repeat a command this many
times. With number@math{_pad} only. Default is `n'.

@item doinv
Show inventory. With number@math{_pad} only. Default is `0'.

@item fight
Prefix key to force fight a direction. Default is `F'. 

@item fight.numpad
Prefix key to force fight a direction. With
number@math{_pad} only. Default is `-'.

@item getdir.help
When asked for a direction, the key to show the
help.  Default is `?'.

@item getdir.self
When asked for a direction, the key to target
yourself. Default is `.'.

@item getdir.self2
When asked for a direction, the key to target
yourself.  Default is `s'.

@item getpos.autodescribe
When asked for a location, the key to toggle
autodescribe. Default is `#'.

@item getpos.all.next
When asked for a location, the key to go to next
closest interesting thing. Default is `a'.

@item getpos.all.prev
When asked for a location, the key to go to
previous closest interesting thing. Default is `A'.

@item getpos.door.next
When asked for a location, the key to go to
next closest door or doorway. Default is `d'.

@item getpos.door.prev
When asked for a location, the key to go to
previous closest door or doorway. Default is `D'.

@item getpos.help
When asked for a location, the key to show help.
Default is `?'.

@item getpos.mon.next
When asked for a location, the key to go to next
closest mon- ster. Default is `m'.

@item getpos.mon.prev
When asked for a location, the key to go to
previous closest monster. Default is `M'.

@item getpos.obj.next
When asked for a location, the key to go to next
closest object. Default is `o'.

@item getpos.obj.prev
When asked for a location, the key to go to
previous closest object. Default is `O'.

@item getpos.menu
When asked for a location, and using one of the next
or previous keys to cycle through targets, toggle showing a menu
instead. Default is `!'.

@item getpos.moveskip
When asked for a location, and using the shifted
movement keys or meta-digit keys to fast-move around, move by
skipping the same glyphs instead of by 8 units. Default is `*'.

@item getpos.filter
When asked for a location, change the filtering
mode when using one of the next or previous keys to cycle through
targets. Toggles between no filtering, in view only, and in the
same area only. Default is `"'.

@item getpos.pick
When asked for a location, the key to choose the
location, and possibly ask for more info. Default is `.'.

@item getpos.pick.once
When asked for a location, the key to choose
the location, and skip asking for more info. Default is `,'.

@item getpos.pick.quick
When asked for a location, the key to choose
the location, skip asking for more info, and exit the location
asking loop. Default is `;'.

@item getpos.pick.verbose
When asked for a location, the key to choose
the location, and show more info without asking. Default is `:'.

@item getpos.self
When asked for a location, the key to go to your
location. Default is `@@'.

@item getpos.unexplored.next
When asked for a location, the key to go
to next closest unexplored location. Default is `x'.

@item getpos.unexplored.prev
When asked for a location, the key to go
to previous closest unexplored location. Default is `X'.

@item getpos.valid
When asked for a location, the key to go to show
valid target locations. Default is `$'.

@item getpos.valid.next
When asked for a location, the key to go to
next closest valid location. Default is `z'.

@item getpos.valid.prev
When asked for a location, the key to go to
previous closest valid location. Default is `Z'.

@item nopickup
Prefix key to move without picking up items. Default is
`m'.

@item redraw
Key to redraw the screen. Default is `@math{^R}'.

@item redraw.numpad
Key to redraw the screen. With number@math{_pad}
only. Default is `@math{^L}'.

@item repeat
Key to repeat previous command. Default is `@math{^A}'.

@item reqmenu
Prefix key to request menu from some commands. Default
is `m'.

@item run
Prefix key to run towards a direction. Default is `G'.

@item run.nopickup
Prefix key to run towards a direction without
picking up items on the way. Default is `M'.

@item run.numpad
Prefix key to run towards a direction. With
number@math{_pad} only. Default is `5'.

@item rush
Prefix key to rush towards a direction. Default is `g'.
@end table

@node Configuring Message Types
@section Configuring Message Types

You can change the way the messages are shown in the message area,
when the message matches a user-defined pattern.

In general, the configuration file entries to describe the message
types look like this: MSGTYPE=type "pattern"

@itemize
@item
type  - how the message should be shown;
@item
pattern - the pattern to match.
@end itemize

The pattern should be a regular expression.

Allowed types are:

@itemize
@item
show - show message normally;
@item
hide - never show the message;
@item
stop - wait for user with more-prompt;
@item
norep - show the message once, but not again if no other message is
shown in between.
@end itemize

Here's an example of message types using NetHack's internal pattern
matching facility:

@example
MSGTYPE=stop "You feel hungry."
MSGTYPE=hide "You displaced *."
@end example

specifies that whenever a message "You feel hungry" is shown, the
user is prompted with more-prompt, and a message matching "You
displaced <something>." is not shown at all.

The order of the defined MSGTYPE lines is important; the last
matching rule is used. Put the general case first, exceptions below
them.

@node Configuring Menu Colors
@section Configuring Menu Colors

Some platforms allow you to define colors used in menu lines when the
line matches a user-defined pattern. At this time the tty, curses,
win32tty and win32gui interfaces support this.

In general, the configuration file entries to describe the menu color
mappings look like this:

MENUCOLOR="pattern"=color&attribute

@itemize
@item
pattern  - the pattern to match;
@item
color   - the color to use for lines matching the pattern;
@item
attribute - the attribute to use for lines matching the
pattern. The attribute is optional, and if left out, you must also
leave out the preceding ampersand.  If no attribute is defined, no
attribute is used.
@end itemize

The pattern should be a regular expression.

Allowed colors are black, red, green, brown, blue, magenta, cyan,
gray, orange, light-green, yellow, light-blue, light-magenta,
light-cyan, and white. And no-color, the default foreground color,
which isn't necessarily the same as any of the other colors.

Allowed attributes are none, bold, dim, underline, blink, and
inverse.  "Normal" is a synonym for "none". Note that the platform
used may interpret the attributes any way it wants.

Here's an example of menu colors using NetHack's internal pattern
matching facility:

@example
MENUCOLOR="* blessed *"=green
MENUCOLOR="* cursed *"=red
MENUCOLOR="* cursed *(being worn)"=red&underline
@end example

specifies that any menu line with " blessed " contained in it will be
shown in green color, lines with " cursed " will be shown in red, and
lines with " cursed " followed by "(being worn)" on the same line
will be shown in red color and underlined. You can have multiple
MENUCOLOR entries in your configuration file, and the last MENUCOLOR
line that matches a menu line will be used for the line.

Note that if you intend to have one or more color specifications
match " uncursed ", you will probably want to turn the
implicit@math{_uncursed} option off so that all items known to be uncursed
are actually displayed with the "uncursed" description.

@node Configuring User Sounds
@section Configuring User Sounds

Some platforms allow you to define sound files to be played when a
message that matches a user-defined pattern is delivered to the
message window. At this time the Qt port and the win32tty and
win32gui ports support the use of user sounds.

The following configuration file entries are relevant to mapping user
sounds to messages:

@table @asis
@item SOUNDDIR
The directory that houses the sound files to be played.

@item SOUND
An entry that maps a sound file to a user-specified
message pattern.  Each SOUND entry is broken down into the
following parts:

@itemize
@item
MESG - message window mapping (the only one supported in 3.6);
@item
pattern  - the pattern to match;
@item
sound file - the sound file to play;
@item
volume   - the volume to be set while playing the sound file.
@end itemize

The pattern should be a POSIX extended regular expression.
@end table

@node Configuring Status Hilites
@section Configuring Status Hilites

Your copy of NetHack may have been compiled with support for "Status
Hilites". If so, you can customize your game display by setting
thresholds to change the color or appearance of fields in the status
display.

The format for defining status colors is:

OPTION=hilite@math{_status}:field-name/behavior/color&attributes

For example, the following line in your configuration file will cause
the hitpoints field to display in the color red if your hitpoints
drop to or below a threshold of 30%:

OPTION=hilite@math{_status}:hitpoints/<=30%/red/normal

(That example is actually specifying red&normal for <=30% and
no-color&normal for >30%.)

For another example, the following line in your configuration file
will cause wisdom to be displayed red if it drops and green if it
rises:

OPTION=hilite@math{_status}:wisdom/down/red/up/green

Allowed colors are black, red, green, brown, blue, magenta, cyan,
gray, orange, light-green, yellow, light-blue, light- magenta,
light-cyan, and white.  And "no-color", the default foreground color
on the display, which is not necessarily the same as black or white
or any of the other colors.

Allowed attributes are none, bold, dim, underline, blink, and
inverse. "Normal" is a synonym for "none"; they should not be used in
combination with any of the other attributes.

To specify both a color and an attribute, use `&' to combine them. To
specify multiple attributes, use `+' to combine those. For example:
"magenta&inverse+dim".

Note that the display may substitute or ignore particular attributes
depending upon its capabilities, and in general may interpret the
attributes any way it wants. For example, on some display systems a
request for bold might yield blink or vice versa. On others, issuing
an attribute request while another is already set up will replace the
earlier attribute rather than combine with it.  Since NetHack issues
attribute requests sequentially (at least with the tty interface)
rather than all at once, the only way a situation like that can be
controlled is to specify just one attribute.

You can adjust the appearance of the following status fields:

@itemize
@item
title, dungeon-level, experience-level, strength, gold, experience,
dexterity, hitpoints, HD, constitution, hitpoints-max, time,
intelligence, power, hunger, wisdom, power-max, carrying-capacity,
charisma, armor-class, condition, alignment, &  score
@end itemize

The pseudo-field "characteristics" can be used to set all six of Str,
Dex, Con, Int, Wis, and Cha at once.  "HD" is "hit dice", an
approximation of experience level displayed when
polymorphed. "experience", "time", and "score" are conditionally
displayed depending upon your other option settings.

Instead of a behavior, "condition" takes the following condition
flags: stone, slime, strngl, foodpois, termill, blind, deaf, stun,
conf, hallu, lev, fly, and ride. You can use "major@math{_troubles}" as an
alias for stone through termill, "minor@math{_troubles}" for blind through
hallu, "movement" for lev, fly, and ride, and "all" for every
condition.

Allowed behaviors are "always", "up", "down", "changed", a percentage
or absolute number threshold, or text to match against.

@itemize
@item
"always" will set the default attributes for that field.

@item
"up", "down" set the field attributes for when the field value
changes upwards or downwards. This attribute times out after
statushilites turns.

@item
"changed" sets the field attribute for when the field value
changes. This attribute times out after statushilites turns.  (If a
field has both a "changed" rule and an "up" or "down" rule which
matches a change in the field's value, the "up" or "down" one takes
precedence.)

@item
percentage sets the field attribute when the field value matches
the percentage. It is specified as a number between 0 and 100,
followed by `%' (percent sign). If the percentage is prefixed with
`<=' or `>=', it also matches when value is below or above the
percentage. Use prefix `<' or `>' to match when strictly below or
above.  (The numeric limit is relaxed slightly for those: >-1% and
<101% are allowed.) Only four fields support percentage rules.
Percentages for "hitpoints" and "power" are straightforward;
they're based on the corresponding maximum field.  Percentage
highlight rules are also allowed for "experience level" and
"experience points" (valid when the showexp option is enabled). For
those, the percentage is based on the progress from the start of
the current experience level to the start of the next level. So if
level 2 starts at 20 points and level 3 starts at 40 points, having
30 points is 50% and 35 points is 75%. 100% is unattainable for
experience because you'll gain a level and the calculations will be
reset for that new level, but a rule for =100% is allowed and
matches the special case of being exactly 1 experience point short
of the next level.

@item
absolute value sets the attribute when the field value matches that
number. The number must be 0 or higher, except for "armor-class'
which allows negative values, and may optionally be preceded by
`='. If the number is preceded by `<=' or `>=' instead, it also
matches when value is below or above.  If the prefix is `<' or `>',
only match when strictly above or below.

@item
text match sets the attribute when the field value matches the
text. Text matches can only be used for "alignment",
"carrying-capacity", "hunger", "dungeon-level", and "title".  For
title, only the role's rank title is tested; the character's name
is ignored.

The in-game options menu can help you determine the correct syntax
for a configuration file.
@end itemize

The whole feature can be disabled by setting option staQtushilites
to 0.

Example hilites:

@example
OPTION=hilite_status: gold/up/yellow/down/brown
OPTION=hilite_status: characteristics/up/green/down/red
OPTION=hilite_status: hitpoints/100%/gray&normal
OPTION=hilite_status: hitpoints/<100%/green&normal
OPTION=hilite_status: hitpoints/<66%/yellow&normal
OPTION=hilite_status: hitpoints/<50%/orange&normal
OPTION=hilite_status: hitpoints/<33%/red&bold
OPTION=hilite_status: hitpoints/<15%/red&inverse
OPTION=hilite_status: condition/major/orange&inverse
OPTION=hilite_status: condition/lev+fly/red&inverse
@end example

@node Modifying NetHack Symbols
@section Modifying NetHack Symbols

NetHack can load entire symbol sets from the symbol file.

The options that are used to select a particular symbol set from the
symbol file are:

@table @asis
@item symset
Set the name of the symbol set that you want to load.

@item roguesymset
Set the name of the symbol set that you want to load
for display on the rogue level.
@end table

You can also override one or more symbols using the SYMBOLS and
ROGUESYMBOLS configuration file options. Symbols are specified as
name:value pairs. Note that NetHack escape-processes the value string
in conventional C fashion. This means that \ is a prefix to take the
following character literally. Thus \ needs to be represented as
\\. The special prefix form switches on the meta bit in the symbol
value, and the ^ prefix causes the following character to be treated
as a control character.

@menu
* NetHack Symbols::
@end menu

@node NetHack Symbols
@subsection NetHack Symbols

@multitable {aaaaaa} {aaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem Symbol
@tab Name
@tab Description
@item 
@tab S@math{_air}
@tab (air)
@item _
@tab S@math{_altar}
@tab (altar)
@item "
@tab S@math{_amulet}
@tab (amulet)
@item A
@tab S@math{_angel}
@tab (angelic being)
@item a
@tab S@math{_ant}
@tab (ant or other insect)
@item ^
@tab S@math{_anti}@math{_magic}@math{_trap}
@tab (anti-magic field)
@item [
@tab S@math{_armor}
@tab (suit or piece of armor)
@item [
@tab S@math{_armour}
@tab (suit or piece of armor)
@item ^
@tab S@math{_arrow}@math{_trap}
@tab (arrow trap)
@item 0
@tab S@math{_ball}
@tab (iron ball)
@item #
@tab S@math{_bars}
@tab (iron bars)
@item B
@tab S@math{_bat}
@tab (bat or bird)
@item ^
@tab S@math{_bear}@math{_trap}
@tab (bear trap)
@item -
@tab S@math{_blcorn}
@tab (bottom left corner
@item b
@tab S@math{_blob}
@tab (blob)
@item +
@tab S@math{_book}
@tab (spellbook)
@item )
@tab S@math{_boomleft}
@tab (boomerang open left)
@item (
@tab S@math{_boomright}
@tab (boomerang open right)
@item `
@tab S@math{_boulder}
@tab (boulder)
@item -
@tab S@math{_brcorn}
@tab (bottom right corner)
@item C
@tab S@math{_centaur}
@tab (centaur)
@item _
@tab S@math{_chain}
@tab (iron chain)
@item #
@tab S@math{_cloud}
@tab (cloud)
@item c
@tab S@math{_cockatrice}
@tab (cockatrice)
@item $
@tab S@math{_coin}
@tab (pile of coins)
@item #
@tab S@math{_corr}
@tab (corridor)
@item -
@tab S@math{_crwall}
@tab (wall)
@item #
@tab S@math{_darkroom}
@tab (dark room)
@item ^
@tab S@math{_dart}@math{_trap}
@tab (dart trap)
@item &
@tab S@math{_demon}
@tab (major demon)
@item *
@tab S@math{_digbeam}
@tab (dig beam)
@item >
@tab S@math{_dnladder}
@tab (ladder down)
@item >
@tab S@math{_dnstair}
@tab (staircase down)
@item d
@tab S@math{_dog}
@tab (dog or other canine)
@item D
@tab S@math{_dragon}
@tab (dragon)
@item ;
@tab S@math{_eel}
@tab (sea monster)
@item E
@tab S@math{_elemental}
@tab (elemental)
@item -
@tab S@math{_explode2}
@tab (explosion top center)
@item \
@tab S@math{_explode3}
@tab (explosion top right)
@item |
@tab S@math{_explode4}
@tab (explosion middle left)
@item 
@tab S@math{_explode5}
@tab (explosion middle center)
@item |
@tab S@math{_explode6}
@tab (explosion middle right)
@item \
@tab S@math{_explode7}
@tab (explosion bottom left)
@item -
@tab S@math{_explode8}
@tab (explosion bottom center)
@item e
@tab S@math{_eye}
@tab (eye or sphere)
@item ^
@tab S@math{_falling}@math{_rock}@math{_trap}
@tab (falling rock trap)
@item f
@tab S@math{_feline}
@tab (cat or other feline)
@item ^
@tab S@math{_fire}@math{_trap}
@tab (fire trap)
@item !
@tab S@math{_flashbeam}
@tab (flash beam)
@item %
@tab S@math{_food}
@tab (piece of food)
@item @{
@tab S@math{_fountain}
@tab (fountain)
@item F
@tab S@math{_fungus}
@tab (fungus or mold)
@item *
@tab S@math{_gem}
@tab (gem or rock)
@item S
@tab _ghost
@tab (ghost)
@item H
@tab S@math{_giant}
@tab (giant humanoid)
@item G
@tab S@math{_gnome}
@tab (gnome)
@item '
@tab S@math{_golem}
@tab (golem)
@item |
@tab S@math{_grave}
@tab (grave)
@item g
@tab S@math{_gremlin}
@tab (gremlin)
@item -
@tab S@math{_hbeam}
@tab (horizontal beam [zap animation])
@item #
@tab S@math{_hcdbridge}
@tab (horizontal raised drawbridge)
@item +
@tab S@math{_hcdoor}
@tab (closed door in horizontal wall)
@item .
@tab S@math{_hodbridge}
@tab (horizontal lowered drawbridge)
@item |
@tab S@math{_hodoor}
@tab (open door in horizontal wall)
@item ^
@tab S@math{_hole}
@tab (hole)
@item @@
@tab S@math{_human}
@tab (human or elf)
@item h
@tab S@math{_humanoid}
@tab (humanoid)
@item -
@tab S@math{_hwall}
@tab (horizontal wall)
@item .
@tab S@math{_ice}
@tab (ice)
@item i
@tab S@math{_imp}
@tab (imp or minor demon)
@item I
@tab S@math{_invisible}
@tab (invisible monster)
@item J
@tab S@math{_jabberwock}
@tab (jabberwock)
@item j
@tab S@math{_jelly}
@tab (jelly)
@item k
@tab S@math{_kobold}
@tab (kobold)
@item K
@tab S@math{_kop}
@tab (Keystone Kop)
@item ^
@tab S@math{_land}@math{_mine}
@tab (land mine)
@item @}
@tab S@math{_lava}
@tab (molten lava)
@item l
@tab S@math{_leprechaun}
@tab (leprechaun)
@item ^
@tab S@math{_level}@math{_teleporter}
@tab (level teleporter)
@item L
@tab S@math{_lich}
@tab (lich)
@item y
@tab S@math{_light}
@tab (light)
@item #
@tab S@math{_litcorr}
@tab (lit corridor)
@item :
@tab S@math{_lizard}
@tab (lizard)
@item \
@tab S@math{_lslant}
@tab (diagonal beam [zap animation])
@item ^
@tab S@math{_magic}@math{_portal}
@tab (magic portal)
@item ^
@tab S@math{_magic}@math{_trap}
@tab (magic trap)
@item m
@tab S@math{_mimic}
@tab (mimic)
@item ]
@tab S@math{_mimic}@math{_def}
@tab (mimic)
@item M
@tab S@math{_mummy}
@tab (mummy)
@item N
@tab S@math{_naga}
@tab (naga)
@item .
@tab S@math{_ndoor}
@tab (doorway without door)
@item n
@tab S@math{_nymph}
@tab (nymph)
@item O
@tab S@math{_ogre}
@tab (ogre)
@item o
@tab S@math{_orc}
@tab (orc)
@item p
@tab S@math{_piercer}
@tab (piercer)
@item ^
@tab S@math{_pit}
@tab (pit)
@item #
@tab S@math{_poisoncloud}
@tab (poison cloud)
@item ^
@tab S@math{_polymorph}@math{_trap}
@tab (polymorph trap)
@item @}
@tab S@math{_pool}
@tab (water)
@item !
@tab S@math{_potion}
@tab (potion)
@item P
@tab S@math{_pudding}
@tab (pudding or ooze)
@item q
@tab S@math{_quadruped}
@tab (quadruped)
@item Q
@tab S@math{_quantmech}
@tab (quantum mechanic)
@item =
@tab S@math{_ring}
@tab (ring)
@item `
@tab S@math{_rock}
@tab (boulder or statue)
@item r
@tab S@math{_rodent}
@tab (rodent)
@item ^
@tab S@math{_rolling}@math{_boulder}@math{_trap}
@tab (rolling boulder trap)
@item .
@tab S@math{_room}
@tab (floor of a room)
@item ^
@tab S@math{_rust}@math{_trap}
@tab (rust trap)
@item R
@tab S@math{_rustmonst}
@tab (rust monster or disenchanter)
@item ?
@tab S@math{_scroll}
@tab (scroll)
@item #
@tab S@math{_sink}
@tab (sink)
@item ^
@tab S@math{_sleeping}@math{_gas}@math{_trap}
@tab (sleeping gas trap)
@item S
@tab S@math{_snake}
@tab (snake)
@item s
@tab S@math{_spider}
@tab (arachnid or centipede)
@item ^
@tab S@math{_spiked}@math{_pit}
@tab (spiked pit)
@item ^
@tab S@math{_squeaky}@math{_board}
@tab (squeaky board)
@item 0
@tab S@math{_ss1}
@tab (magic shield 1 of 4)
@item #
@tab S@math{_ss2}
@tab (magic shield 2 of 4)
@item @@
@tab S@math{_ss3}
@tab (magic shield 3 of 4)
@item *
@tab S@math{_ss4}
@tab (magic shield 4 of 4)
@item ^
@tab S@math{_statue}@math{_trap}
@tab (statue trap)
@item S
@tab _stone
@tab (solid rock or unexplored terrain
@item 
@tab 
@tab or dark part of a room)
@item ]
@tab S@math{_strange}@math{_obj}
@tab (strange object)
@item -
@tab S@math{_sw}@math{_bc}
@tab (swallow bottom center)
@item \
@tab S@math{_sw}@math{_bl}
@tab (swallow bottom left)
@item |
@tab S@math{_sw}@math{_ml}
@tab (swallow middle left)
@item |
@tab S@math{_sw}@math{_mr}
@tab (swallow middle right)
@item -
@tab S@math{_sw}@math{_tc}
@tab (swallow top center)
@item \
@tab S@math{_sw}@math{_tr}
@tab (swallow top right)
@item -
@tab S@math{_tdwall}
@tab (wall)
@item ^
@tab S@math{_teleportation}@math{_trap}
@tab (teleportation trap)
@item \
@tab S@math{_throne}
@tab (opulent throne)
@item -
@tab S@math{_tlcorn}
@tab (top left corner)
@item |
@tab S@math{_tlwall}
@tab (wall)
@item (
@tab S@math{_tool}
@tab (useful item (pick-axe,key,lamp..))
@item ^
@tab S@math{_trap}@math{_door}
@tab (trap door)
@item t
@tab S@math{_trapper}
@tab (trapper or lurker above)
@item -
@tab S@math{_trcorn}
@tab (top right corner)
@item #
@tab S@math{_tree}
@tab (tree)
@item T
@tab S@math{_troll}
@tab (troll)
@item |
@tab S@math{_trwall}
@tab (wall)
@item -
@tab S@math{_tuwall}
@tab (wall)
@item U
@tab S@math{_umber}
@tab (umber hulk)
@item u
@tab S@math{_unicorn}
@tab (unicorn or horse)
@item <
@tab S@math{_upladder}
@tab (ladder up)
@item <
@tab S@math{_upstair}
@tab (staircase up)
@item V
@tab S@math{_vampire}
@tab (vampire)
@item |
@tab S@math{_vbeam}
@tab (vertical beam [zap animation])
@item #
@tab S@math{_vcdbridge}
@tab (vertical raised drawbridge)
@item +
@tab S@math{_vcdoor}
@tab (closed door in vertical wall)
@item .
@tab S@math{_venom}
@tab (splash of venom)
@item ^
@tab S@math{_vibrating}@math{_square}
@tab (vibrating square)
@item .
@tab S@math{_vodbridge}
@tab (vertical lowered drawbridge)
@item -
@tab S@math{_vodoor}
@tab (open door in vertical wall)
@item v
@tab S@math{_vortex}
@tab (vortex)
@item |
@tab S@math{_vwall}
@tab (vertical wall)
@item @}
@tab S@math{_water}
@tab (water)
@item )
@tab S@math{_weapon}
@tab (weapon)
@item "
@tab S@math{_web}
@tab (web)
@item w
@tab S@math{_worm}
@tab (worm)
@item ~
@tab S@math{_worm}@math{_tail}
@tab (long worm tail)
@item W
@tab S@math{_wraith}
@tab (wraith)
@item x
@tab S@math{_xan}
@tab (xan or other extraordinary insect)
@item X
@tab S@math{_xorn}
@tab (xorn)
@item Y
@tab S@math{_yeti}
@tab (apelike creature)
@item Z
@tab S@math{_zombie}
@tab (zombie)
@item z
@tab S@math{_zruty}
@tab (zruty)
@item S
@tab _pet@math{_override}
@tab (any pet if ACCESSIBILITY=1 is set)
@item S
@tab _hero@math{_override}
@tab (hero if ACCESSIBILITY=1 is set)
@end multitable

Notes:

@itemize
@item
Several symbols in this table appear to be blank. They are the
space character, except for S@math{_pet}@math{_override} and S@math{_hero}@math{_override}
which don't have any default value and can only be used if enabled
in the "sysconf" file.

@item
S@math{_rock} is misleadingly named; rocks and stones use S@math{_gem}. Statues
and boulders are the rock being referred to, but since version
3.6.0, statues are displayed as the monster they depict.  So S@math{_rock}
is only used for boulders and not used at all if overridden by the
more specific S@math{_boulder}.
@end itemize

@node Configuring NetHack for Play by the Blind
@section Configuring NetHack for Play by the Blind

NetHack can be set up to use only standard ASCII characters for
making maps of the dungeons. This makes the MS-DOS versions of
NetHack completely accessible to the blind who use speech and/or
Braille access technologies. Players will require a good working
knowledge of their screen-reader's review features, and will have to
know how to navigate horizontally and vertically character by
character. They will also find the search capabilities of their
screen-readers to be quite valuable. Be certain to examine this
Guidebook before playing so you have an idea what the screen layout
is like. You'll also need to be able to locate the PC cursor. It is
always where your character is located. Merely searching for an
@@-sign will not always find your character since there are other
humanoids represented by the same sign. Your screen-reader should
also have a function which gives you the row and column of your
review cursor and the PC cursor. These co-ordinates are often useful
in giving players a better sense of the overall location of items on
the screen.

NetHack can also be compiled with support for sending the game
messages to an external program, such as a text-to-speech
synthesizer. If the "#version" extended command shows "external
program as a message handler", your NetHack has been compiled with
the capability. When compiling NetHack from source on Linux and other
POSIX systems, define MSGHANDLER to enable it. To use the capability,
set the environment variable NETHACK@math{_MSGHANDLER} to an executable,
which will be executed with the game message as the program's only
parameter.

While it is not difficult for experienced users to edit the
defaults.nh file to accomplish this, novices may find this task
somewhat daunting. Included within the "symbols" file of all official
distributions of NetHack is a symset called NHAccess. Selecting that
symset in your configuration file will cause the game to run in a
manner accessible to the blind. After you have gained some experience
with the game and with editing files, you may want to alter settings
via SYMBOLS= and ROGUESYMBOLS= in your configuration file to better
suit your preferences. See the previous section for the special
symbols S@math{_pet}@math{_override} to force a consistent symbol for all pets and
S@math{_hero}@math{_override} to force a unique symbol for the player character if
accessibility is enabled in the sysconf file.

The most crucial settings to make the game more accessible are:

@table @asis
@item symset:NHAccess
Load a symbol set appropriate for use by blind
players.

@item roguesymset:NHAccess
Load a symbol set for the rogue level that
is appropriate for use by blind players.

@item menustyle:traditional
This will assist in the interface to
speech synthesizers.

@item nomenu@math{_overlay}
Show menus on a cleared screen and aligned to the
left edge.

@item number@math{_pad}
A lot of speech access programs use the number-pad to
review the screen. If this is the case, disable the number@math{_pad}
option and use the traditional Rogue-like commands.

@item autodescribe
Automatically describe the terrain under the cursor
when targeting.

@item mention@math{_walls}
Give feedback messages when walking towards a wall
or when travel command was interrupted.

@item whatis@math{_coord}:compass
When targeting with cursor, describe the
cursor position with coordinates relative to your character.

@item whatis@math{_filter}:area
When targeting with cursor, filter possible
locations so only those in the same area (eg. same room, or same
corridor) are considered.

@item whatis@math{_moveskip}
When targeting with cursor and using fast-move,
skip the same glyphs instead of moving 8 units at a time.

@item nostatus@math{_updates}
Prevent updates to the status lines at the
bottom of the screen, if your screen-reader reads those lines. The
same in- formation can be seen via the "#attributes" command.
@end table

@node Global Configuration for System Administrators
@section Global Configuration for System Administrators

If NetHack is compiled with the SYSCF option, a system administrator
should set up a global configuration; this is a file in the same
format as the traditional per-user configuration file (see
above). This file should be named sysconf and placed in the same
directory as the other NetHack support files.  The options recognized
in this file are listed below. Any option not set uses a compiled-in
default (which may not be appropriate for your system).

@itemize
@item
WIZARDS = A space-separated list of user names who are allowed to
play in debug mode (commonly referred to as wizard mode). A value
of a single asterisk (*) allows anyone to start a game in debug
mode.

@item
SHELLERS = A list of users who are allowed to use the shell escape
command (!). The syntax is the same as WIZARDS@.

@item
EXPLORERS = A list of users who are allowed to use the explore
mode. The syntax is the same as WIZARDS@.

@item
MAXPLAYERS = Limit the maximum number of games that can be running
at the same time.  

@item
SUPPORT = A string explaining how to get local support (no default
value).

@item
RECOVER = A string explaining how to recover a game on this system
(no default value).

@item
SEDUCE = 0 or 1 to disable or enable, respectively, the SEDUCE
option. When disabled, incubi and succubi behave like nymphs.

@item
CHECK@math{_PLNAME} = Setting this to 1 will make the EXPLORERS, WIZARDS,
and SHELLERS check for the player name instead of the user's
login name.

@item
CHECK@math{_SAVE}@math{_UID} = 0 or 1 to disable or enable, respectively, the UID
(used identification number) checking for save files (to verify
that the user who is restoring is the same one who saved).
@end itemize

The following options affect the score file:

@itemize
@item
PERSMAX = Maximum number of entries for one person.

@item
ENTRYMAX = Maximum number of entries in the score file.

@item
POINTSMIN = Minimum number of points to get an entry in the score
file.

@item
PERS@math{_IS}@math{_UID} = 0 or 1 to use user names or numeric userids,
respectively, to identify unique people for the score file.

@item
MAX@math{_STATUENAME}@math{_RANK} = Maximum number of score file entries to use
for random statue names (default is 10).

@item
ACCESSIBILITY = 0 or 1 to disable or enable, respectively, the
ability for players to set S@math{_pet}@math{_override} and S@math{_hero}@math{_override}
symbols in their configuration file.

@item
PORTABLE@math{_DEVICE}@math{_PATHS} = 0 or 1 Windows OS only, the game will look
for all of its external files, and write to all of its output files
in one place rather than at the standard locations.

@item
DUMPLOGFILE = A filename where the end-of-game dumplog is
saved. Not defining this will prevent dumplog from being
created. Only available if your game is compiled with
DUMPLOG@. Allows the following placeholders:
@end itemize

@example
%% - literal `%'
%v - version (eg. "3.6.3-0")
%u - game UID
%t - game start time, UNIX timestamp format
%T - current time, UNIX timestamp format
%d - game start time, YYYYMMDDhhmmss format
%D - current time, YYYYMMDDhhmmss format
%n - player name
%N - first character of player name
@end example

@node Scoring
@chapter Scoring

NetHack maintains a list of the top scores or scorers on your
machine, depending on how it is set up. In the latter case, each
account on the machine can post only one non-winning score on this
list.  If you score higher than someone else on this list, or better
your previous score, you will be inserted in the proper place under
your current name. How many scores are kept can also be set up when
NetHack is compiled.

Your score is chiefly based upon how much experience you gained, how
much loot you accumulated, how deep you explored, and how the game
ended. If you quit the game, you escape with all of your gold intact.
If, however, you get killed in the Mazes of Menace, the guild will
only hear about 90% of your gold when your corpse is discovered
(adventurers have been known to collect finder's fees). So, consider
whether you want to take one last hit at that monster and possibly
live, or quit and stop with whatever you have. If you quit, you keep
all your gold, but if you swing and live, you might find more.

If you just want to see what the current top players/games list is,
you can type nethack -s all on most versions.

@node Explore mode
@chapter Explore mode

NetHack is an intricate and difficult game.  Novices might falter in
fear, aware of their ignorance of the means to survive. Well, fear
not. Your dungeon comes equipped with an "explore" or "discovery"
mode that enables you to keep old save files and cheat death, at the
paltry cost of not getting on the high score list.

There are two ways of enabling explore mode. One is to start the game
with the -X command-line switch or with the play-mode:explore
option.  The other is to issue the "#exploremode" extended command
while already playing the game. Starting a new game in explore mode
provides your character with a wand of wishing in initial inventory;
switching during play does not.  The other benefits of explore mode
are left for the trepid reader to discover.

@menu
* Debug mode::
@end menu

@node Debug mode
@section Debug mode

Debug mode, also known as wizard mode, is undocumented aside from
this brief description and the various "debug mode only" commands
listed among the command descriptions. It is intended for tracking
down problems within the program rather than to provide god-like
powers to your character, and players who attempt debugging are
expected to figure out how to use it themselves. It is initiated by
starting the game with the -D command-line switch or with the
playmode:debug option.

For some systems, the player must be logged in under a particular
user name to be allowed to use debug mode; for others, the hero must
be given a particular character name (but may be any role; there's no
connection between "wizard mode" and the Wizard role). Attempting to
start a game in debug mode when not allowed or not available will
result in falling back to explore mode instead.

@node Credits
@chapter Credits

The original hack game was modeled on the Berkeley UNIX rogue game.
Large portions of this paper were shamelessly cribbed from A Guide to
the Dungeons of Doom, by Michael C@. Toy and Kenneth C@. R@. C@. Arnold.
Small portions were adapted from Further Exploration of the Dungeons
of Doom, by Ken Arromdee.

NetHack is the product of literally dozens of people's work. Main
events in the course of the game development are described below:

@itemize
@item
Jay Fenlason wrote the original Hack, with help from Kenny
Woodland, Mike Thome and Jon Payne.

@item
Andries Brouwer did a major re-write, transforming Hack into a very
different game, and published (at least) three versions (1.0.1,
1.0.2, and 1.0.3) for UNIX machines to the Usenet.

@item
Don G@. Kneller ported Hack 1.0.3 to Microsoft C and MS-DOS,
producing PC HACK 1.01e, added support for DEC Rainbow graphics in
version 1.03g, and went on to produce at least four more versions
(3.0, 3.2, 3.51, and 3.6).

@item
R@. Black ported PC HACK 3.51 to Lattice C and the Atari 520/1040ST,
producing ST Hack 1.03.

@item
Mike Stephenson merged these various versions back together,
incorporating many of the added features, and produced NetHack
1.4. He then coordinated a cast of thousands in enhancing and
debugging NetHack 1.4 and released NetHack versions 2.2 and 2.3.

@item
Later, Mike coordinated a major rewrite of the game, heading a team
which included Ken Arromdee, Jean-Christophe Collet, Steve Creps,
Eric Hendrickson, Izchak Miller, John Rupley, Mike Threepoint, and
Janet Walz, to produce NetHack 3.0c.

@item
NetHack 3.0 was ported to the Atari by Eric R@. Smith, to OS/2 by
Timo Hakulinen, and to VMS by David Gentzel. The three of them and
Kevin Darcy later joined the main NetHack Development Team to
produce subsequent revisions of 3.0.

@item
Olaf Seibert ported NetHack 2.3 and 3.0 to the Amiga. Norm Meluch,
Stephen Spackman and Pierre Martineau designed overlay code for PC
NetHack 3.0. Johnny Lee ported NetHack 3.0 to the Macintosh. Along
with various other Dungeoneers, they continued to enhance the PC,
Macintosh, and Amiga ports through the later revisions of 3.0.

@item
Headed by Mike Stephenson and coordinated by Izchak Miller and
Janet Walz, the NetHack Development Team which now included Ken
Arromdee, David Cohrs, Jean-Christophe Collet, Kevin Darcy, Matt
Day, Timo Hakulinen, Steve Linhart, Dean Luick, Pat Rankin, Eric
Raymond, and Eric Smith undertook a radical revision of 3.0. They
re-structured the game's design, and re-wrote major parts of the
code. They added multiple dungeons, a new display, special
individual character quests, a new endgame and many other new
features, and produced NetHack 3.1.

@item
Ken Lorber, Gregg Wonderly and Greg Olson, with help fromq Richard
Addison, Mike Passaretti, and Olaf Seibert, developed NetHack 3.1
for the Amiga.

@item
Norm Meluch and Kevin Smolkowski, with help from Carl Schelin,
Stephen Spackman, Steve VanDevender, and Paul Winner, ported
NetHack 3.1 to the PC@.

@item
Jon W@{tte and Hao-yang Wang, with help from Ross Brown, Mike
Engber, David Hairston, Michael Hamel, Jonathan Handler, Johnny
Lee, Tim Lennan, Rob Menke, and Andy Swanson, developed NetHack 3.1
for the Macintosh, porting it for MPW@. Building on their
development, Bart House added a Think C port.

@item
Timo Hakulinen ported NetHack 3.1 to OS/2. Eric Smith ported
NetHack 3.1 to the Atari. Pat Rankin, with help from Joshua
Delahunty, was responsible for the VMS version of NetHack
3.1. Michael Allison ported NetHack 3.1 to Windows NT@.

@item
Dean Luick, with help from David Cohrs, developed NetHack 3.1 for
X11. Warwick Allison wrote a tiled version of NetHack for the
Atari; he later contributed the tiles to the NetHack Development
Team and tile support was then added to other platforms.

@item
The 3.2 NetHack Development Team, comprised of Michael Allison, Ken
Arromdee, David Cohrs, Jessie Collet, Steve Creps, Kevin Darcy,
Timo Hakulinen, Steve Linhart, Dean Luick, Pat Rankin, Eric Smith,
Mike Stephenson, Janet Walz, and Paul Winner, released version 3.2
in April of 1996.
@end itemize

Version 3.2 marked the tenth anniversary of the formation of the
development team. In a testament to their dedication to the game, all
thirteen members of the original NetHack Development Team remained on
the team at the start of work on that release. During the interval
between the release of 3.1.3 and 3.2, one of the founding members of
the NetHack Development Team, Dr. Izchak Miller, was diagnosed with
cancer and passed away. That release of the game was dedicated to him
by the development and porting teams.

During the lifespan of NetHack 3.1 and 3.2, several enthusiasts of
the game added their own modifications to the game and made these
"variants" publicly available:

@itemize
@item
Tom Proudfoot and Yuval Oren created NetHack++, which was quickly
renamed NetHack--. Working independently, Stephen White wrote
NetHack Plus. Tom Proudfoot later merged NetHack Plus and his own
NetHack-- to produce SLASH@. Larry Stewart-Zerba and Warwick Allison
improved the spell casting system with the Wizard Patch. Warwick
Allison also ported NetHack to use the Qt interface.

@item
Warren Cheung combined SLASH with the Wizard Patch to produce
Slash'EM, and with the help of Kevin Hugo, added more features.
Kevin later joined the NetHack Development Team and incorporated
the best of these ideas in NetHack 3.3.
@end itemize

The final update to 3.2 was the bug fix release 3.2.3, which was
released simultaneously with 3.3.0 in December 1999 just in time for
the Year 2000.

The 3.3 NetHack Development Team, consisting of Michael Allison, Ken
Arromdee, David Cohrs, Jessie Collet, Steve Creps, Kevin Darcy, Timo
Hakulinen, Kevin Hugo, Steve Linhart, Ken Lorber, Dean Luick, Pat
Rankin, Eric Smith, Mike Stephenson, Janet Walz, and Paul Winner,
released 3.3.0 in December 1999 and 3.3.1 in August of 2000.

Version 3.3 offered many firsts. It was the first version to separate
race and profession. The Elf class was removed in preference to an
elf race, and the races of dwarves, gnomes, and orcs made their first
appearance in the game alongside the familiar human race. Monk and
Ranger roles joined Archeologists, Barbarians, Cavemen, Healers,
Knights, Priests, Rogues, Samurai, Tourists, Valkyries and of course,
Wizards. It was also the first version to allow you to ride a steed,
and was the first version to have a publicly available web-site
listing all the bugs that had been discovered. Despite that
constantly growing bug list, 3.3 proved stable enough to last for
more than a year and a half.

The 3.4 NetHack Development Team initially consisted of Michael
Allison, Ken Arromdee, David Cohrs, Jessie Collet, Kevin Hugo, Ken
Lorber, Dean Luick, Pat Rankin, Mike Stephenson, Janet Walz, and Paul
Winner, with Warwick Allison joining just before the release of
NetHack 3.4.0 in March 2002.

As with version 3.3, various people contributed to the game as a
whole as well as supporting ports on the different platforms that
NetHack runs on:

@itemize
@item
Pat Rankin maintained 3.4 for VMS@.

@item
Michael Allison maintained NetHack 3.4 for the MS-DOS
platform. Paul Winner and Yitzhak Sapir provided encouragement.

@item
Dean Luick, Mark Modrall, and Kevin Hugo maintained and enhanced
the Macintosh port of 3.4.

@item
Michael Allison, David Cohrs, Alex Kompel, Dion Nicolaas, and
Yitzhak Sapir maintained and enhanced 3.4 for the Microsoft Windows
platform. Alex Kompel contributed a new graphical interface for the
Windows port. Alex Kompel also contributed a Windows CE port for
3.4.1.

@item
Ron Van Iwaarden was the sole maintainer of NetHack for OS/2 the
past several releases. Unfortunately Ron's last OS/2 machine
stopped working in early 2006. A great many thanks to Ron for
keeping NetHack alive on OS/2 all these years.

@item
Janne Salmijarvi and Teemu Suikki maintained and enhanced the Amiga
port of 3.4 after Janne Salmijarvi resurrected it for 3.3.1.

@item
Christian "Marvin" Bressler maintained 3.4 for the Atari after he
resurrected it for 3.3.1.
@end itemize

The release of NetHack 3.4.3 in December 2003 marked the beginning of
a long release hiatus. 3.4.3 proved to be a remarkably stable version
that provided continued enjoyment by the community for more than a
decade. The NetHack Development Team slowly and quietly continued to
work on the game behind the scenes during the tenure of 3.4.3. It was
during that same period that several new variants emerged within the
NetHack community. Notably sporkhack by Derek S@. Ray, unnethack by
Patric Mueller, nitrohack and its successors originally by Daniel
Thaler and then by Alex Smith, and Dynahack by Tung Nguyen. Some of
those variants continue to be developed, maintained, and enjoyed by
the community to this day.

In September 2014, an interim snapshot of the code under development
was released publicly by other parties. Since that code was a
work-in-progress and had not gone through the process of debugging it
as a suitable release, it was decided that the version numbers
present on that code snapshot would be retired and never used in an
official NetHack release. An announcement was posted on the NetHack
Development Team's official nethack.org website to that effect,
stating that there would never be a 3.4.4, 3.5, or 3.5.0 official
release version.

In January 2015, preparation began for the release of NetHack 3.6.

At the beginning of development for what would eventually get
released as 3.6.0, the NetHack Development Team consisted of Warwick
Allison, Michael Allison, Ken Arromdee, David Cohrs, Jessie Collet,
Ken Lorber, Dean Luick, Pat Rankin, Mike Stephenson, Janet Walz, and
Paul Winner. In early 2015, ahead of the release of 3.6.0, new
members Sean Hunt, Pasi Kallinen, and Derek S@. Ray joined the NetHack
Development Team.

Near the end of the development of 3.6.0, one of the significant
inspirations for many of the humorous and fun features found in the
game, author Terry Pratchett, passed away. NetHack 3.6.0 introduced a
tribute to him.

3.6.0 was released in December 2015, and merged work done by/ the
development team since the release of 3.4.3 with some of the beloved
community patches. Many bugs were fixed and some code was
restructured.

The NetHack Development Team, as well as Steve VanDevender and Kevin
Smolkowski, ensured that NetHack 3.6 continued to operate on various
UNIX flavors and maintained the X11 interface.

Ken Lorber, Haoyang Wang, Pat Rankin, and Dean Luick maintained the
port of NetHack 3.6 for Mac OSX@.

Michael Allison, David Cohrs, Bart House, Pasi Kallinen, Alex Kompel,
Dion Nicolaas, Derek S@. Ray and Yitzhak Sapir maintained the port of
NetHack 3.6 for Microsoft Windows.

Pat Rankin attempted to keep the VMS port running for NetHack 3.6,
hindered by limited access. Kevin Smolkowski has updated and tested
it for the most recent version of OpenVMS (V8.4 as of this writing)
on Alpha and Integrity (aka Itanium aka IA64) but not VAX@.

Ray Chason resurrected the msdos port for 3.6 and contributed the
necessary updates to the community at large.

In late April 2018, several hundred bug fixes for 3.6.0 and some new
features were assembled and released as NetHack 3.6.1. The NetHack
Development Team at the time of release of 3.6.1 consisted of Warwick
Allison, Michael Allison, Ken Arromdee, David Cohrs, Jessie Collet,
Pasi Kallinen, Ken Lorber, Dean Luick, Patric Mueller, Pat Rankin,
Derek S@. Ray, Alex Smith, Mike Stephenson, Janet Walz, and Paul
Winner.

In early May 2019, another 320 bug fixes along with some enhancements
and the adopted curses window port, were released as 3.6.2.

Bart House, who had contributed to the game as a porting team
participant for decades, joined the NetHack Development Team in late
May 2019.

NetHack 3.6.3 was released on December 5, 2019 containing over 190
bug fixes to NetHack 3.6.2.

NetHack 3.6.4 was released on December 18, 2019 containing a security
fix and a few bug fixes.

NetHack 3.6.5 was released on January 27, 2020 containing some
security fixes and a small number of bug fixes.

The official NetHack web site is maintained by Ken Lorber at
@uref{https://www.nethack.org/}.

@menu
* SPECIAL THANKS::
@end menu

@node SPECIAL THANKS
@section SPECIAL THANKS

On behalf of the NetHack community, thank you very much once again to
M@. Drew Streib and Pasi Kallinen for providing a public NetHack
server at nethack.alt.org. Thanks to Keith Simpson and Andy Thomson
for hardfought.org. Thanks to all those unnamed dungeoneers who
invest their time and effort into annual NetHack tournaments such as
Junethack, The November NetHack Tournament and in days past,
devnull.net (gone for now, but not forgotten).

@itemize
@item
- - - - - - - - -
@end itemize

From time to time, some depraved individual out there in netland
sends a particularly intriguing modification to help out with the
game. The NetHack Development Team sometimes makes note of the names
of the worst of these miscreants in this, the list of Dungeoneers:

@multitable {aaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaa}
@item Adam Aronow
@tab J.Ali Harlow
@tab Mikko Juola
@item Alex Kompel
@tab Janet Walz
@tab Nathan  Eady
@item Alex Smith
@tab Janne Salmijarvi
@tab Norm Meluch
@item Andreas Dorn
@tab Jean-Christophe Collet
@tab Olaf Seibert
@item Andy Church
@tab Jeff Baily
@tab Pasi Kllinen0
@item Andy Swanson
@tab Jochen Eried
@tab Pat Rankin1
@item Andy Thomson
@tab John Kalle
@tab Patric ueller2
@item Ari Huttunen
@tab John Rupey
@tab Paul Winner3
@item Bart House
@tab John S.Ben
@tab Pierre Mrtineau4
@item Benson I@. Margulies
@tab Johnny Lee
@tab Ra5lf Brown
@item Bill Dyer
@tab Jon W@{tte
@tab Ray Chason
@item Boudewijn Waijers
@tab Jonathan Handler
@tab Richard Addison
@item Bruce Cox
@tab Joshua Delahunty
@tab Richard Beigel
@item Bruce Holloway
@tab Karl Garrison
@tab Richard P@. Hughey
@item Bruce Mewborne
@tab Keizo Yamamoto
@tab Rob Menke
@item Carl Schelin
@tab Keith Simpson
@tab Robin Bandy
@item Chris Russo
@tab Ken Arnold
@tab Robin Johnson
@item David Cohrs
@tab Ken Arromdee
@tab Roderick Schertler
@item David Damerell
@tab Ken Lorber
@tab Roland McGrath
@item David Gentzel
@tab Ken Washikita
@tab Ron Van Iwaarden
@item David Hairston
@tab Kevin Darcy
@tab Ronnen Miller
@item Dean Luick
@tab Kevin Hugo
@tab Ross Brown
@item Del Lamb
@tab Kevin Sitze
@tab Sascha Wostmann
@item Derek S@. Ray
@tab Kevin Smolkowski
@tab Scott Bigham
@item Deron Meranda
@tab Kevin Sweet
@tab Scott R@. Turner
@item Dion Nicolaas
@tab Lars Huttar
@tab Sean Hunt
@item Dylan O'Donnell
@tab Leon Arnott
@tab Stephen Spackman
@item Eric Backus
@tab M@. Drew Streib
@tab Stefan Thielscher
@item Eric Hendrickson
@tab Malcolm Ryan
@tab Stephen White
@item Eric R@. Smith
@tab Mark Gooderum
@tab Steve Creps
@item Eric S@. Raymond
@tab Mark Modrall
@tab Steve Linhart
@item Erik Andersen
@tab Marvin Bressler
@tab Steve VanDevender
@item Fredrik Ljungdahl
@tab Matthew Day
@tab Teemu Suikki
@item Frederick Roeber
@tab Merlyn LeRoy
@tab Tim Lennan
@item Gil Neiger
@tab Michael Allison
@tab Timo Hakulinen
@item Greg Laskin
@tab Michael Feir
@tab Tom Almy
@item Greg Olson
@tab Michael Hamel
@tab Tom West
@item Gregg Wonderly
@tab Michael Sokolov
@tab Warren Cheung
@item Hao-yang Wang
@tab Mike Engber
@tab Warwick Allison
@item Helge Hafting
@tab Mike Gallop
@tab Yitzhak Sapir
@item Irina Rempt-Drijfhout
@tab Mike Passaretti
@tab 
@item Izchak Miller
@tab Mike Stephenson
@tab 
@end multitable

Brand and product names are trademarks or registered trademarks of
their respective holders.


NetHack 3.6                   January 27, 2020

@node Nethack man pages
@chapter Nethack man pages

@menu
* Nethack(1) man page::
* Nethack recovery tool::
* Nethack data librarian man page::
* Nethack dungeon compiler man page::
* Nethack special levels compiler man page::
@end menu

@node Nethack(1) man page
@section Nethack(1) man page

@example
NETHACK(6)                             NETHACK(6)


NAME
    nethack - Exploring The Mazes of Menace

SYNOPSIS
    nethack [ -d directory ] [ -n ] [ -p profession ] [ -r race ] [ -[DX] ]
    [ -u playername ] [ -dec ] [ -ibm ] [ --version[:paste] ]

    nethack [ -d directory ] -s [ -v ] [ -p profession ] [ -r race ] [
    playernames ]

DESCRIPTION
    NetHack is a display oriented Dungeons & Dragons(tm) - like game. The
    standard tty display and command structure resemble rogue.

    Other, more graphical display options exist for most platforms.

    To get started you really only need to know two commands. The command
    ?  will give you a list of the available commands (as well as other
    information) and the command / will identify the things you see on the
    screen.

    To win the game (as opposed to merely playing to beat other people's
    high scores) you must locate the Amulet of Yendor which is somewhere
    below the 20th level of the dungeon and get it out. Few people achieve
    this; most never do. Those who have go down in history as heroes among
    heroes - and then they find ways of making the game even harder. See
    the Guidebook section on Conduct if this game has gotten too easy for
    you.

    When the game ends, whether by your dying, quitting, or escaping from
    the caves, NetHack will give you (a fragment of) the list of top scor-
    ers.  The scoring is based on many aspects of your behavior, but a
    rough estimate is obtained by taking the amount of gold you've found in
    the cave plus four times your (real) experience. Precious stones may
    be worth a lot of gold when brought to the exit.  There is a 10%
    penalty for getting yourself killed.

    The environment variable NETHACKOPTIONS can be used to initialize many
    run-time options. The ? command provides a description of these
    options and syntax. (The -dec and -ibm command line options are equiv-
    alent to the decgraphics and ibmgraphics run-time options described
    there, and are provided purely for convenience on systems supporting
    multiple types of terminals.)

    Because the option list can be very long (particularly when specifying
    graphics characters), options may also be included in a configuration
    file. The default is located in your home directory and named
    .nethackrc on Unix systems. On other systems, the default may be dif-
    ferent, usually NetHack.cnf.  On DOS or Windows, the  name  is
    defaults.nh, while on the Macintosh or BeOS, it is NetHack Defaults.
    The configuration file's location may be specified by setting NETHACK-
    OPTIONS to a string consisting of an @@ character followed by the file-
    name.

    The -u playername option supplies the answer to the question "Who are
    you?".  It overrides any name from the options or configuration file,
    USER, LOGNAME, or getlogin(), which will otherwise be tried in order.
    If none of these provides a useful name, the player will be asked for
    one. Player names (in conjunction with uids) are used to identify save
    files, so you can have several saved games under different names. Con-
    versely, you must use the appropriate player name to restore a saved
    game.

    A playername suffix can be used to specify the profession, race, align-
    ment and/or gender of the character. The full syntax of the playername
    that includes a suffix is "name-ppp-rrr-aaa-ggg". "ppp" are at least
    the first three letters of the profession (this can also be specified
    using a separate -p profession option). "rrr" are at least the first
    three letters of the character's race (this can also be specified using
    a separate -r race option). "aaa" are at last the first three letters
    of the character's alignment, and "ggg" are at least the first three
    letters of the character's gender. Any of the parts of the suffix may
    be left out.

    -p profession can be used to determine the character profession, also
    known as the role. You can specify either the male or female name for
    the character role, or the first three characters of the role as an
    abbreviation. -p @@ has been retained to explicitly request that a ran-
    dom role be chosen. It may need to be quoted with a backslash (\@@) if
    @@ is the "kill" character (see "stty") for the terminal, in order to
    prevent the current input line from being cleared.

    Likewise, -r race can be used to explicitly request that a race be cho-
    sen.

    Leaving out any of these characteristics will result in you being
    prompted during the game startup for the information.


    The -s option alone will print out the list of your scores on the cur-
    rent version.  An immediately following -v reports on all versions
    present in the score file. The -s may also be followed by arguments -p
    and -r to print the scores of particular roles and races only. It may
    also be followed by one or more player names to print the scores of the
    players mentioned, by 'all' to print out all scores, or by a number to
    print that many top scores.

    The -n option suppresses printing of any news from the game administra-
    tor.

    The -D or -X option will start the game in a special non-scoring dis-
    covery mode. -D will, if the player is the game administrator, start
    in debugging (wizard) mode instead.

    The -d option, which must be the first argument if it appears, supplies
    a directory which is to serve as the playground.  It overrides the
    value from NETHACKDIR, HACKDIR, or the directory specified by the game
    administrator during compilation (usually /usr/games/lib/nethackdir).
    This option is usually only useful to the game administrator. The
    playground must contain several auxiliary files such as help files, the
    list of top scorers, and a subdirectory save where games are saved.

AUTHORS
    Jay Fenlason (+ Kenny Woodland, Mike Thome and Jon Payne) wrote the
    original hack, very much like rogue (but full of bugs).

    Andries Brouwer continuously deformed their sources into an entirely
    different game.

    Mike Stephenson has continued the perversion of sources, adding various
    warped character classes and sadistic traps with the help of many
    strange people who reside in that place between the worlds, the Usenet
    Zone. A number of these miscreants are immortalized in the historical
    roll of dishonor and various other places.

    The resulting mess is now called NetHack, to denote its development by
    the Usenet. Andries Brouwer has made this request for the distinction,
    as he may eventually release a new version of his own.

FILES
    Run-time configuration options were discussed above and use a platform
    specific name for a file in a platform specific location.  For Unix,
    the name is '.nethackrc' in the user's home directory.

    All  other  files  are  in  the  playground directory, normally
    /usr/games/lib/nethackdir. If DLB was defined during the compile, the
    data files and special levels will be inside a larger file, normally
    nhdat, instead of being separate files.

    nethack           The program itself.
    data, oracles, rumors    Data files used by NetHack.
    quest.dat, bogusmon     More data files.
    engrave, epitaph, tribute  Still more data files.
    symbols           Data file holding sets of specifications
                  for how to display monsters, objects, and
                  map features.
    options           Data file containing a description of the
                  build-time option settings.
    help, hh          Help data files.
    cmdhelp, opthelp, wizhelp  More help data files.
    *.lev            Predefined special levels.
    dungeon           Control file for special levels.
    history           A short history of NetHack.
    license           Rules governing redistribution.
    record           The list of top scorers.
    logfile           An extended list of games played
                  (optional).
    xlogfile          A more detailed version of 'logfile'
                  (also optional).
    paniclog          Record of exceptional conditions
                  discovered during program execution.
    xlock.nn          Description of dungeon level 'nn' of
                  active game 'x' if there's a limit on the
                  number of simultaneously active games.
    UUcccccc.nn         Alternate form for dungeon level 'nn'
                  of active game by user 'UU' playing
                  character named 'cccccc' when there's no
                  limit on number of active games.
    perm            Lock file for xlock.0 or UUcccccc.0.
    bonesDD.nn         Descriptions of the ghost and belongings
                  of a deceased adventurer who met his
                  or her demise on level 'nn'.

    save/            A subdirectory containing saved games.

    sysconf           System-wide options. Required if
                  program is built with 'SYSCF' option
                  enabled, ignored if not.

    The location of 'sysconf' is specified at build time and can't be
    changed except by updating source file "config.h" and rebuilding the
    program.

    In a perfect world, 'paniclog' would remain empty.

ENVIRONMENT
    USER or LOGNAME     Your login name.
    HOME          Your home directory.
    SHELL          Your shell.
    TERM          The type of your terminal.
    HACKPAGER or PAGER   Replacement for default pager.
    MAIL          Mailbox file.
    MAILREADER       Replacement for default reader
                (probably /bin/mail or /usr/ucb/mail).
    NETHACKDIR or HACKDIR  Playground.
    NETHACKOPTIONS     String predefining several NetHack
                options.

    If the same option is specified in both NETHACKOPTIONS and .nethackrc,
    the value assigned in NETHACKOPTIONS takes precedence.

    SHOPTYPE and SPLEVTYPE can be used in debugging (wizard) mode.
    DEBUGFILES can be used if the program was built with 'DEBUG' enabled.

SEE ALSO
    dgn_comp(6), lev_comp(6), recover(6)

BUGS
    Probably infinite.



    Dungeons & Dragons is a Trademark of Wizards of the Coast, Inc.



                7 December 2015           NETHACK(6)
@end example

@node Nethack recovery tool
@section Nethack recovery tool

@example



RECOVER(6)          1993           RECOVER(6)



NAME
   recover - recover a NetHack game interrupted by disaster

SYNOPSIS
   recover [ -d directory ] base1 base2 ...

DESCRIPTION
   Occasionally, a NetHack game will be interrupted by disaster
   when the game or the system crashes. Prior to NetHack v3.1,
   these games were lost because various information like the
   player's inventory was kept only in memory. Now, all per-
   tinent information can be written out to disk, so such games
   can be recovered at the point of the last level change.

   The base options tell recover which files to process.  Each
   base option specifies recovery of a separate game.

   The -d option, which must be the first argument if it
   appears, supplies a directory which is the NetHack play-
   ground. It overrides the value from NETHACKDIR, HACKDIR, or
   the directory specified by the game administrator during
   compilation (usually /usr/games/lib/nethackdir).

   For recovery to be possible, nethack must have been compiled
   with the INSURANCE option, and the run-time option check-
   point must also have been on. NetHack normally writes out
   files for levels as the player leaves them, so they will be
   ready for return visits. When checkpointing, NetHack also
   writes out the level entered and the current game state on
   every level change. This naturally slows level changes down
   somewhat.

   The level file names are of the form base.nn, where nn is an
   internal bookkeeping number for the level. The file base.0
   is used for game identity, locking, and, when checkpointing,
   for the game state. Various OSes use different strategies
   for constructing the base name.  Microcomputers use the
   character name, possibly truncated and modified to be a
   legal filename on that system. Multi-user systems use the
   (modified) character name prefixed by a user number to avoid
   conflicts, or "xlock" if the number of concurrent players is
   being limited.  It may be necessary to look in the play-
   ground to find the correct base name of the interrupted
   game.  recover will transform these level files into a save
   file of the same name as nethack would have used.

   Since recover must be able to read and delete files from the
   playground and create files in the save directory, it has
   interesting interactions with game security.  Giving ordi-
   nary players access to recover through setuid or setgid is
   tantamount to leaving the playground world-writable, with
   respect to both cheating and messing up other players. For
   a single-user system, this of course does not change any-
   thing, so some of the microcomputer ports install recover by
   default.

   For a multi-user system, the game administrator may want to
   arrange for all .0 files in the playground to be fed to
   recover when the host machine boots, and handle game crashes
   individually.  If the user population is sufficiently
   trustworthy, recover can be installed with the same permis-
   sions the nethack executable has. In either case, recover
   is easily compiled from the distribution utility directory.

NOTES
   Like nethack itself, recover will overwrite existing save-
   files of the same name. Savefiles created by recover are
   uncompressed; they may be compressed afterwards if desired,
   but even a compression-using nethack will find them in the
   uncompressed form.

SEE ALSO
   nethack(6)

BUGS
   recover makes no attempt to find out if a base name speci-
   fies a game in progress. If multiple machines share a play-
   ground, this would be impossible to determine.

   recover should be taught to use the nethack playground lock-
   ing mechanism to avoid conflicts.

January         Last change: 9             2

@end example

@node Nethack data librarian man page
@section Nethack data librarian man page

@example

DLB(6)            1993             DLB(6)


NAME
   dlb - NetHack data librarian

SYNOPSIS
   dlb @{ xct @} [ vfIC ] arguments... [ files... ]

DESCRIPTION
   Dlb is a file archiving tool in the spirit (and tradition)
   of tar for NetHack version 3.1 and higher. It is used to
   maintain the archive files from which NetHack reads special
   level files and other read-only information. Note that like
   tar the command and option specifiers are specified as a
   continuous string and are followed by any arguments required
   in the same order as the option specifiers.

   This facility is optional and may be excluded during NetHack
   configuration.

COMMANDS
   The x command causes dlb to extract the contents of the
   archive into the current directory.

   The c command causes dlb to create a new archive from files
   in the current directory.

   The t command lists the files in the archive.

OPTIONS AND ARGUMENTS
   v      verbose output

   f archive  specify the archive. Default if f not specified
   is LIBFILE (usually the nhdat file in the playground).

   I lfile   specify the file containing the list of files to
   put in to or extract from the archive if no files are listed
   on the command line. Default for archive creation if no
   files are listed is LIBLISTFILE.

   C dir    change directory. Changes directory before try-
   ing to read any files (including the archive and the lfile).

EXAMPLES
   Create the default archive from the default file list:
         dlb c

   List the contents of the archive 'foo':
         dlb tf foo

AUTHOR
   Kenneth Lorber

SEE ALSO
   nethack(6), tar(1)

BUGS
   Not a good tar emulation; - does not mean stdin or stdout.
   Should include an optional compression facility. Not all
   read-only files for NetHack can be read out of an archive;
   examining the source is the only way to know which files can
   be.

Oct           Last change: 28            2

@end example

@node Nethack dungeon compiler man page
@section Nethack dungeon compiler man page

@example

DGN_COMP(6)          1995          DGN_COMP(6)

NAME
   dgn_comp - NetHack dungeon compiler

SYNOPSIS
   dgn_comp [ file ]

   If no arguments are given, it reads standard input.

DESCRIPTION
   Dgn_comp is a dungeon compiler for NetHack version 3.2 and
   higher. It takes a description file as an argument and pro-
   duces a dungeon "script" that is to be loaded by NetHack at
   runtime.

   The purpose of this tool is to provide NetHack administra-
   tors and implementors with a convenient way to create a cus-
   tom dungeon for the game, without having to recompile the
   entire world.

GRAMMAR
   DUNGEON: name bonesmarker ( base , rand ) [ %age ]

   where name is the dungeon name, bonesmarker is a letter for
   marking bones files, ( base , rand ) is the number of lev-
   els, and %age is its percentage chance of being generated
   (if absent, 100% chance).

   DESCRIPTION: tag

   where tag is currently one of HELLISH, MAZELIKE, or ROGUE-
   LIKE.

   ALIGNMENT | LEVALIGN: [ lawful | neutral | chaotic |
   unaligned ]

   gives the alignment of the dungeon/level (default  is
   unaligned).

   ENTRY: level

   the dungeon entry point. The dungeon connection attaches at
   this level of the given dungeon. If the value of level is
   negative, the entry level is calculated from the bottom of
   the dungeon, with -1 being the last level. If this line is
   not present in a dungeon description, the entry level
   defaults to 1.

   PROTOFILE: name

   the prototypical name for dungeon level files in this
   dungeon.  For example, the PROTOFILE name for the dungeon
   Vlad's Tower is tower.

   LEVEL: name bonesmarker @@ ( base , rand ) [ %age ]

   where name is the level name, bonesmarker is a letter for
   marking bones files, ( base , rand ) is the location and
   %age is the generation percentage, as above.

   RNDLEVEL: name bonesmarker @@ ( base , rand ) [ %age ]
   rndlevs

   where name is the level name, bonesmarker is a letter for
   marking bones files, ( base , rand ) is the location, %age
   is the generation percentage, as above, and rndlevs is the
   number of similar levels available to choose from.

   CHAINLEVEL: name bonesmarker prev_name + ( base , rand ) [
   %age ]

   where name is the level name, bonesmarker is a letter for
   marking bones files, prev_name is the name of a level
   defined previously, ( base , rand ) is the offset from the
   level being chained from, and %age is the generation percen-
   tage.

   RNDCHAINLEVEL: name bonesmarker prev_name + ( base , rand )
   [ %age ] rndlevs

   where name is the level name, bonesmarker is a letter for
   marking bones files, prev_name is the name of a level
   defined previously, ( base , rand ) is the offset from the
   level being chained from, %age is the generation percentage,
   and rndlevs is the number of similar levels available to
   choose from.

   LEVELDESC: type

   where type is the level type, (see DESCRIPTION, above). The
   type is used to override any pre-set value used to describe
   the entire dungeon, for this level only.

   BRANCH: name @@ ( base , rand ) [ stair | no_up | no_down |
   portal ] [ up | down ]

   where name is the name of the dungeon to branch to, and (
   base , rand ) is the location of the branch. The last two
   optional arguments are the branch type and branch direction.
   The type of a branch can be a two-way stair connection, a
   one-way stair connection, or a magic portal.  A one-way
   stair is described by the types no_up and no_down which
   specify which stair direction is missing.  The default
   branch type is stair.  The direction for a stair can be
   either up or down; direction is not applicable to portals.
   The default direction is down.

   CHAINBRANCH: name prev_name + ( base , rand ) [ stair |
   no_up | no_down | portal ] [ up | down ]

   where name is the name of the dungeon to branch to,
   prev_name is the name of a previously defined level and (
   base , rand ) is the offset from the level being chained
   from.  The optional branch type and direction are the same
   as described above.

GENERIC RULES
   Each dungeon must have a unique bonesmarker , and each spe-
   cial level must have a bonesmarker unique within its dungeon
   (letters may be reused in different dungeons).  If the
   bonesmarker has the special value "none", no bones files
   will be created for that level or dungeon.

   The value base may be in the range of 1 to MAXLEVEL (as
   defined in global.h ).

   The value rand may be in the range of -1 to MAXLEVEL.

   If rand is -1 it will be replaced with  the  value
   (num_dunlevs(dungeon) - base) during the load process (ie.
   from here to the end of the dungeon).

   If rand is 0 the level is located absolutely at base.

   Branches don't have a probability.  Dungeons do.  If a
   dungeon fails to be generated during load, all its levels
   and branches are skipped.

   No level or branch may be chained from a level with a per-
   centage generation probability.  This is to prevent non-
   resolution during the load. In addition, no branch may be
   made from a dungeon with a percentage generation probability
   for the same reason.

   As a general rule using the dungeon compiler:

   If a dungeon has a protofile name associated with it (eg.
   tower) that file will be used.

   If a special level is present, it will override the above
   rule and the appropriate file will be loaded.

   If neither of the above are present, the standard generator
   will take over and make a "normal" level.

   A level alignment, if present, will override the alignment
   of the dungeon that it exists within.

EXAMPLE
   Here is the current syntax of the dungeon compiler's
   "language":


   #
   #    The dungeon description file for the "standard" original
   #    3.0 NetHack.
   #
   DUNGEON:    "The Dungeons of Doom" "D" (25, 5)
   LEVEL:     "rogue" "none" @@ (15, 4)
   LEVEL:     "oracle" "none" @@ (5, 7)
   LEVEL:     "bigroom" "B" @@ (12, 3) 15
   LEVEL:     "medusa" "none" @@ (20, 5)
   CHAINLEVEL:   "castle" "medusa" + (1, 4)
   CHAINBRANCH:  "Hell" "castle" + (0, 0) no_down
   BRANCH:     "The Astral Plane" @@ (1, 0) no_down up

   DUNGEON:    "Hell" "H" (25, 5)
   DESCRIPTION:  mazelike
   DESCRIPTION:  hellish
   BRANCH:     "Vlad's Tower" @@ (13, 5) up
   LEVEL:     "wizard" "none" @@ (15, 10)
   LEVEL:     "fakewiz" "A" @@ (5, 5)
   LEVEL:     "fakewiz" "B" @@ (10, 5)
   LEVEL:     "fakewiz" "C" @@ (15, 5)
   LEVEL:     "fakewiz" "D" @@ (20, 5)
   LEVEL:     "fakewiz" "E" @@ (25, 5)

   DUNGEON:    "Vlad's Tower" "T" (3, 0)
   PROTOFILE:   "tower"
   DESCRIPTION:  mazelike
   ENTRY:     -1

   DUNGEON:    "The Astral Plane" "A" (1, 0)
   DESCRIPTION:  mazelike
   PROTOFILE:   "endgame"

   NOTES:
   Lines beginning with '#' are considered comments.
   A special level must be explicitly aligned.  The alignment
   of the dungeon it is in only applies to non-special levels
   within that dungeon.

AUTHOR
   M. Stephenson (from the level compiler by Jean-Christophe
   Collet).

SEE ALSO
   lev_comp(6), nethack(6)

BUGS
   Probably infinite.

Dec           Last change: 12            5

@end example

@node Nethack special levels compiler man page
@section Nethack special levels compiler man page

@example

LEV_COMP(6)          1996          LEV_COMP(6)


NAME
   lev_comp - NetHack special levels compiler

SYNOPSIS
   lev_comp [ -w ] [ files ]

   If no arguments are given, it reads standard input.

DESCRIPTION
   Lev_comp is a special level compiler for NetHack version 3.2
   and higher.  It takes description files as arguments and
   produces level files that can be loaded by NetHack at run-
   time.

   The purpose of this tool is to provide NetHack administra-
   tors and implementors with a convenient way for adding spe-
   cial levels to the game, or modifying existing ones, without
   having to recompile the entire world.

   The -w option causes lev_comp to perform extra checks on the
   level and display extra warnings, however these warnings are
   sometimes superfluous, so they are not normally displayed.


GRAMMAR
   file      : /* nothing */
           | levels
           ;

   levels     : level
           | level levels
           ;

   level      : maze_level
           | room_level
           ;

   maze_level   : maze_def flags lev_init messages regions
           ;

   room_level   : level_def flags lev_init messages rreg_init rooms corridors_def
           ;

   level_def    : LEVEL_ID ':' string
           ;

   lev_init    : /* nothing */
           | LEV_INIT_ID ':' CHAR ',' CHAR ',' BOOLEAN ',' BOOLEAN ',' light_state ',' walled
           ;

   walled     : BOOLEAN
           | RANDOM_TYPE
           ;

   flags      : /* nothing */
           | FLAGS_ID ':' flag_list
           ;

   flag_list    : FLAG_TYPE ',' flag_list
           | FLAG_TYPE
           ;

   messages    : /* nothing */
           | message messages
           ;

   message     : MESSAGE_ID ':' STRING
           ;

   rreg_init    : /* nothing */
           | rreg_init init_rreg
           ;

   init_rreg    : RANDOM_OBJECTS_ID ':' object_list
           | RANDOM_MONSTERS_ID ':' monster_list
           ;

   rooms      : /* Nothing - dummy room for use with INIT_MAP */
           | roomlist
           ;

   roomlist    : aroom
           | aroom roomlist
           ;

   corridors_def  : random_corridors
           | corridors
           ;

   random_corridors: RAND_CORRIDOR_ID
           ;

   corridors    : /* nothing */
           | corridors corridor
           ;

   corridor    : CORRIDOR_ID ':' corr_spec ',' corr_spec
           | CORRIDOR_ID ':' corr_spec ',' INTEGER
           ;

   corr_spec    : '(' INTEGER ',' DIRECTION ',' door_pos ')'
           ;

   aroom      : room_def room_details
           | subroom_def room_details
           ;

   subroom_def   : SUBROOM_ID ':' room_type ',' light_state ',' subroom_pos ',' room_size ',' string roomfill
           ;

   room_def    : ROOM_ID ':' room_type ',' light_state ',' room_pos ',' room_align ',' room_size roomfill
           ;

   roomfill    : /* nothing */
           | ',' BOOLEAN
           ;

   room_pos    : '(' INTEGER ',' INTEGER ')'
           | RANDOM_TYPE
           ;

   subroom_pos   : '(' INTEGER ',' INTEGER ')'
           | RANDOM_TYPE
           ;

   room_align   : '(' h_justif ',' v_justif ')'
           | RANDOM_TYPE
           ;

   room_size    : '(' INTEGER ',' INTEGER ')'
           | RANDOM_TYPE
           ;

   room_details  : /* nothing */
           | room_details room_detail
           ;

   room_detail   : room_name
           | room_chance
           | room_door
           | monster_detail
           | object_detail
           | trap_detail
           | altar_detail
           | fountain_detail
           | sink_detail
           | pool_detail
           | gold_detail
           | engraving_detail
           | stair_detail
           ;

   room_name    : NAME_ID ':' string
           ;

   room_chance   : CHANCE_ID ':' INTEGER
           ;

   room_door    : DOOR_ID ':' secret ',' door_state ',' door_wall ',' door_pos
           ;

   secret     : BOOLEAN
           | RANDOM_TYPE
           ;

   door_wall    : DIRECTION
           | RANDOM_TYPE
           ;

   door_pos    : INTEGER
           | RANDOM_TYPE
           ;

   maze_def    : MAZE_ID ':' string ',' filling
           ;

   filling     : CHAR
           | RANDOM_TYPE
           ;

   regions     : aregion
           | aregion regions
           ;

   aregion     : map_definition reg_init map_details
           ;

   map_definition : NOMAP_ID
           | map_geometry MAP_ID
           ;

   map_geometry  : GEOMETRY_ID ':' h_justif ',' v_justif
           ;

   h_justif    : LEFT_OR_RIGHT
           | CENTER
           ;

   v_justif    : TOP_OR_BOT
           | CENTER
           ;

   reg_init    : /* nothing */
           | reg_init init_reg
           ;

   init_reg    : RANDOM_OBJECTS_ID ':' object_list
           | RANDOM_PLACES_ID ':' place_list
           | RANDOM_MONSTERS_ID ':' monster_list
           ;

   object_list   : object
           | object ',' object_list
           ;

   monster_list  : monster
           | monster ',' monster_list
           ;

   place_list   : place
           | place ',' place_list
           ;

   map_details   : /* nothing */
           | map_details map_detail
           ;

   map_detail   : monster_detail
           | object_detail
           | door_detail
           | trap_detail
           | drawbridge_detail
           | region_detail
           | stair_region
           | portal_region
           | teleprt_region
           | branch_region
           | altar_detail
           | fountain_detail
           | mazewalk_detail
           | wallify_detail
           | ladder_detail
           | stair_detail
           | gold_detail
           | engraving_detail
           | diggable_detail
           | passwall_detail
           ;

   monster_detail : MONSTER_ID chance ':' monster_c ',' m_name ',' coordinate
           monster_infos
           ;

   monster_infos  : /* nothing */
           | monster_infos monster_info
           ;

   monster_info  : ',' string
           | ',' MON_ATTITUDE
           | ',' MON_ALERTNESS
           | ',' alignment
           | ',' MON_APPEARANCE string
           ;

   object_detail  : OBJECT_ID object_desc
           | COBJECT_ID object_desc
           ;

   object_desc   : chance ':' object_c ',' o_name ',' object_where object_infos
           ;

   object_where  : coordinate
           | CONTAINED
           ;

   object_infos  : /* nothing */
           | ',' curse_state ',' monster_id ',' enchantment optional_name
           | ',' curse_state ',' enchantment optional_name
           | ',' monster_id ',' enchantment optional_name
           ;

   curse_state   : RANDOM_TYPE
           | CURSE_TYPE
           ;

   monster_id   : STRING
           ;

   enchantment   : RANDOM_TYPE
           | INTEGER
           ;

   optional_name  : /* nothing */
           | ',' NONE
           | ',' STRING
           ;

   door_detail   : DOOR_ID ':' door_state ',' coordinate
           ;

   trap_detail   : TRAP_ID chance ':' trap_name ',' coordinate
           ;

   drawbridge_detail: DRAWBRIDGE_ID ':' coordinate ',' DIRECTION ',' door_state
           ;

   mazewalk_detail : MAZEWALK_ID ':' coordinate ',' DIRECTION
           ;

   wallify_detail : WALLIFY_ID
           ;

   ladder_detail  : LADDER_ID ':' coordinate ',' UP_OR_DOWN
           ;

   stair_detail  : STAIR_ID ':' coordinate ',' UP_OR_DOWN
           ;

   stair_region  : STAIR_ID ':' lev_region ',' lev_region ',' UP_OR_DOWN
           ;

   portal_region  : PORTAL_ID ':' lev_region ',' lev_region ',' string
           ;

   teleprt_region : TELEPRT_ID ':' lev_region ',' lev_region teleprt_detail
           ;

   branch_region  : BRANCH_ID ':' lev_region ',' lev_region
           ;

   teleprt_detail : /* empty */
           | ',' UP_OR_DOWN
           ;

   lev_region   : region
           | LEV '(' INTEGER ',' INTEGER ',' INTEGER ',' INTEGER ')'
           ;

   fountain_detail : FOUNTAIN_ID ':' coordinate
           ;

   sink_detail : SINK_ID ':' coordinate
           ;

   pool_detail : POOL_ID ':' coordinate
           ;

   diggable_detail : NON_DIGGABLE_ID ':' region
           ;

   passwall_detail : NON_PASSWALL_ID ':' region
           ;

   region_detail  : REGION_ID ':' region ',' light_state ',' room_type prefilled
           ;

   altar_detail  : ALTAR_ID ':' coordinate ',' alignment ',' altar_type
           ;

   gold_detail   : GOLD_ID ':' amount ',' coordinate
           ;

   engraving_detail: ENGRAVING_ID ':' coordinate ',' engraving_type ',' string
           ;

   monster_c    : monster
           | RANDOM_TYPE
           | m_register
           ;

   object_c    : object
           | RANDOM_TYPE
           | o_register
           ;

   m_name     : string
           | RANDOM_TYPE
           ;

   o_name     : string
           | RANDOM_TYPE
           ;

   trap_name    : string
           | RANDOM_TYPE
           ;

   room_type    : string
           | RANDOM_TYPE
           ;

   prefilled    : /* empty */
           | ',' FILLING
           | ',' FILLING ',' BOOLEAN
           ;

   coordinate   : coord
           | p_register
           | RANDOM_TYPE
           ;

   door_state   : DOOR_STATE
           | RANDOM_TYPE
           ;

   light_state   : LIGHT_STATE
           | RANDOM_TYPE
           ;

   alignment    : ALIGNMENT
           | a_register
           | RANDOM_TYPE
           ;

   altar_type   : ALTAR_TYPE
           | RANDOM_TYPE
           ;

   p_register   : P_REGISTER '[' INTEGER ']'
           ;

   o_register   : O_REGISTER '[' INTEGER ']'
           ;

   m_register   : M_REGISTER '[' INTEGER ']'
           ;

   a_register   : A_REGISTER '[' INTEGER ']'
           ;

   place      : coord
           ;

   monster     : CHAR
           ;

   object     : CHAR
           ;

   string     : STRING
           ;

   amount     : INTEGER
           | RANDOM_TYPE
           ;

   chance     : /* empty */
           | PERCENT
           ;

   engraving_type : ENGRAVING_TYPE
           | RANDOM_TYPE
           ;

   coord      : '(' INTEGER ',' INTEGER ')'
           ;

   region     : '(' INTEGER ',' INTEGER ',' INTEGER ',' INTEGER ')'
           ;

   NOTE:
   Lines beginning with '#' are considered comments.

   The contents of a "MAP" description of a maze is a rectangle
   showing the exact level map that should be used for the
   given part of a maze. Each character in the map corresponds
   to a location on the screen. Different location types are
   denoted using different ASCII characters.  The following
   characters are recognized. To give an idea of how these are
   used, see the EXAMPLE, below. The maximum size of a map is
   normally 76 columns by 21 rows.

   '-'   horizontal wall
   '|'   vertical wall
   '+'   a doorway (state is specified in a DOOR declaration)
   'A'   open air
   'B'   boundary room location (for bounding unwalled irregular regions)
   'C'   cloudy air
   'I'   ice
   'S'   a secret door
   'H'   a secret corridor
   '@{'   a fountain
   '\'   a throne
   'K'   a sink (if SINKS is defined, else a room location)
   '@}'   a part of a moat or other deep water
   'P'   a pool
   'L'   lava
   'W'   water (yes, different from a pool)
   'T'   a tree
   'F'   iron bars
   '#'   a corridor
   '.'   a normal room location (unlit unless lit in a REGION declaration)
   ' '   stone

EXAMPLE
   Here is an example of a description file (a very simple
   one):

   MAZE : "fortress", random
   GEOMETRY : center , center
   MAP
   @}@}@}@}@}@}@}@}@}
   @}@}@}|-|@}@}@}
   @}@}|-.-|@}@}
   @}|-...-|@}
   @}|.....|@}
   @}|-...-|@}
   @}@}|-.-|@}@}
   @}@}@}|-|@}@}@}
   @}@}@}@}@}@}@}@}@}
   ENDMAP
   MONSTER: '@@', "Wizard of Yendor", (4,4)
   OBJECT: '"', "Amulet of Yendor", (4,4)
   # a hell hound flanking the Wiz on a random side
   RANDOM_PLACES: (4,3), (4,5), (3,4), (5,4)
   MONSTER: 'd', "hell hound", place[0]
   # a chest on another random side
   OBJECT: '(', "chest", place[1]
   # a sack on a random side, with a diamond and maybe a ruby in it
   CONTAINER: '(', "sack", place[2]
   OBJECT: '*', "diamond", contained
   OBJECT[50%]: '*', "ruby", contained
   # a random dragon somewhere
   MONSTER: 'D', random, random
   # 3 out of 4 chance for a random trap in the EAST end
   TRAP[75%]: random, (6,4)
   # an electric eel below the SOUTH end
   MONSTER: ';', "electric eel", (4,8)
   # make the walls non-diggable
   NON_DIGGABLE: (0,0,8,8)
   TELEPORT_REGION: levregion(0,0,79,20), (0,0,8,8)

   This example will produce a file named "fortress" that can
   be integrated into one of the numerous mazes of the game.

   Note especially the final, TELEPORT_REGION specification.
   This  says that level teleports or other non-stairway
   arrivals on this level can land anywhere on the level except
   the area of the map. This shows the use of the ``levre-
   gion'' prefix allowed in certain region specifications.
   Normally, regions apply only to the most recent MAP specifi-
   cation, but when prefixed with ``levregion'', one can refer
   to any area of the level, regardless of the placement of the
   current MAP in the level.

AUTHOR
   Jean-Christophe Collet, David Cohrs.

SEE ALSO
   dgn_comp(6), nethack(6)

BUGS
   Probably infinite. Most importantly, still needs additional
   bounds checking.

May           Last change: 16            11

@end example

@node Index
@chapter Index

@printindex cp

@bye